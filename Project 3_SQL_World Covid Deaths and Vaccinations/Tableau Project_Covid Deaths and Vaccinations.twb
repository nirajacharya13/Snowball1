<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20232.23.0611.2007                               -->
<workbook original-version='18.1' source-build='2023.2.0 (20232.23.0611.2007)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='Sheet1 (Tableau Table 4)' inline='true' name='federated.1oh2bw305qrqva12iwb450zyyf34' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Tableau Table 4' name='excel-direct.1kvwosx0tkcs3a1h68k620ys6edi'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/user/Downloads/Git from Snowball/Project 3_SQL_World Covid Deaths and Vaccinations/Tableau Table 4.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.1kvwosx0tkcs3a1h68k620ys6edi' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:E10001:no:A1:E10001:0' header='yes' outcome='6'>
            <column datatype='string' name='location' ordinal='0' />
            <column datatype='integer' name='population' ordinal='1' />
            <column datatype='date' name='date' ordinal='2' />
            <column datatype='integer' name='HighestInfectionCount' ordinal='3' />
            <column datatype='real' name='PercentPoplationInfected' ordinal='4' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.1kvwosx0tkcs3a1h68k620ys6edi' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:E10001:no:A1:E10001:0' header='yes' outcome='6'>
            <column datatype='string' name='location' ordinal='0' />
            <column datatype='integer' name='population' ordinal='1' />
            <column datatype='date' name='date' ordinal='2' />
            <column datatype='integer' name='HighestInfectionCount' ordinal='3' />
            <column datatype='real' name='PercentPoplationInfected' ordinal='4' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:E10001:no:A1:E10001:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_075EF4181F6F4DB1A768CC0111AD6906]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>population</remote-name>
            <remote-type>20</remote-type>
            <local-name>[population]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>population</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_075EF4181F6F4DB1A768CC0111AD6906]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[date]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>date</remote-alias>
            <ordinal>2</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_075EF4181F6F4DB1A768CC0111AD6906]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>HighestInfectionCount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[HighestInfectionCount]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>HighestInfectionCount</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_075EF4181F6F4DB1A768CC0111AD6906]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PercentPoplationInfected</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PercentPoplationInfected]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>PercentPoplationInfected</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_075EF4181F6F4DB1A768CC0111AD6906]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Highest Infection Count' datatype='integer' name='[HighestInfectionCount]' role='measure' type='quantitative' />
      <column caption='Percent Poplation Infected' datatype='real' name='[PercentPoplationInfected]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Sheet1' datatype='table' name='[__tableau_internal_object_id__].[Sheet1_075EF4181F6F4DB1A768CC0111AD6906]' role='measure' type='quantitative' />
      <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
      <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
      <column caption='Population' datatype='integer' name='[population]' role='measure' type='quantitative' />
      <column-instance column='[location]' derivation='Attribute' name='[attr:location:nk]' pivot='key' type='nominal' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:location:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cook Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guadeloupe&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Lower middle income&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Saint Barthelemy&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Wales&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;United States Virgin Islands&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;American Samoa&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;England&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Reunion&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Faeroe Islands&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saint Martin (French part)&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Guam&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Oceania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Saint Helena&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Wallis and Futuna&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Northern Cyprus&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Sint Maarten (Dutch part)&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Timor&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Vatican&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Martinique&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Africa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mayotte&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Niue&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Upper middle income&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Democratic Republic of Congo&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;High income&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Northern Ireland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Curacao&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Falkland Islands&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Saint Pierre and Miquelon&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;French Guiana&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Pitcairn&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Scotland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Macao&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Western Sahara&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bonaire Sint Eustatius and Saba&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Low income&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Northern Mariana Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Tokelau&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;North America&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;European Union&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Guernsey&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jersey&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Micronesia (country)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;North Korea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[attr:location:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cook Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guadeloupe&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Lower middle income&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Saint Barthelemy&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Wales&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;United States Virgin Islands&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;American Samoa&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;England&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Reunion&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Faeroe Islands&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saint Martin (French part)&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Guam&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Oceania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Saint Helena&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Wallis and Futuna&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Northern Cyprus&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Sint Maarten (Dutch part)&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Timor&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Vatican&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Martinique&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Africa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mayotte&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Niue&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Upper middle income&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Democratic Republic of Congo&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;High income&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Northern Ireland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Curacao&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Falkland Islands&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Saint Pierre and Miquelon&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;French Guiana&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Pitcairn&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Scotland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Macao&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Western Sahara&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bonaire Sint Eustatius and Saba&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Low income&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Northern Mariana Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Tokelau&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;North America&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;European Union&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Guernsey&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jersey&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Micronesia (country)&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;North Korea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Nepal&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <default-sorts>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Sheet1' id='Sheet1_075EF4181F6F4DB1A768CC0111AD6906'>
            <properties context=''>
              <relation connection='excel-direct.1kvwosx0tkcs3a1h68k620ys6edi' name='Sheet1' table='[Sheet1$]' type='table'>
                <columns gridOrigin='A1:E10001:no:A1:E10001:0' header='yes' outcome='6'>
                  <column datatype='string' name='location' ordinal='0' />
                  <column datatype='integer' name='population' ordinal='1' />
                  <column datatype='date' name='date' ordinal='2' />
                  <column datatype='integer' name='HighestInfectionCount' ordinal='3' />
                  <column datatype='real' name='PercentPoplationInfected' ordinal='4' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='Sheet1 (Tableau Table 1)' inline='true' name='federated.0ji5wbp17asrc91434k2e0kieybm' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Tableau Table 1' name='excel-direct.123nunh1pseuea1crq5mt06paebo'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/user/Downloads/Git from Snowball/Project 3_SQL_World Covid Deaths and Vaccinations/Tableau Table 1.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.123nunh1pseuea1crq5mt06paebo' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:C2:no:A1:C2:0' header='yes' outcome='6'>
            <column datatype='integer' name='Total_Cases' ordinal='0' />
            <column datatype='integer' name='Total_Deaths' ordinal='1' />
            <column datatype='real' name='DeathPercentage' ordinal='2' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.123nunh1pseuea1crq5mt06paebo' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:C2:no:A1:C2:0' header='yes' outcome='6'>
            <column datatype='integer' name='Total_Cases' ordinal='0' />
            <column datatype='integer' name='Total_Deaths' ordinal='1' />
            <column datatype='real' name='DeathPercentage' ordinal='2' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:C2:no:A1:C2:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total_Cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Total_Cases]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Total_Cases</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_5DB8E4F890354D24816055C64F042B0D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total_Deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Total_Deaths]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>Total_Deaths</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_5DB8E4F890354D24816055C64F042B0D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DeathPercentage</remote-name>
            <remote-type>5</remote-type>
            <local-name>[DeathPercentage]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>DeathPercentage</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_5DB8E4F890354D24816055C64F042B0D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Death Percentage' datatype='real' name='[DeathPercentage]' role='measure' type='quantitative' />
      <column caption='Total Cases' datatype='integer' name='[Total_Cases]' role='measure' type='quantitative' />
      <column caption='Total Deaths' datatype='integer' name='[Total_Deaths]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Sheet1' datatype='table' name='[__tableau_internal_object_id__].[Sheet1_5DB8E4F890354D24816055C64F042B0D]' role='measure' type='quantitative' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Nepal&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Sheet1' id='Sheet1_5DB8E4F890354D24816055C64F042B0D'>
            <properties context=''>
              <relation connection='excel-direct.123nunh1pseuea1crq5mt06paebo' name='Sheet1' table='[Sheet1$]' type='table'>
                <columns gridOrigin='A1:C2:no:A1:C2:0' header='yes' outcome='6'>
                  <column datatype='integer' name='Total_Cases' ordinal='0' />
                  <column datatype='integer' name='Total_Deaths' ordinal='1' />
                  <column datatype='real' name='DeathPercentage' ordinal='2' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='Sheet1 (Tableau Table 2)' inline='true' name='federated.1d3a8ns1fjx9of133km941dh2p4t' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Tableau Table 2' name='excel-direct.1ue04h21ceaua91grao620w8ecg4'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/user/Downloads/Git from Snowball/Project 3_SQL_World Covid Deaths and Vaccinations/Tableau Table 2.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.1ue04h21ceaua91grao620w8ecg4' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:B7:no:A1:B7:0' header='yes' outcome='6'>
            <column datatype='string' name='continent' ordinal='0' />
            <column datatype='integer' name='TotalDeathCount' ordinal='1' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.1ue04h21ceaua91grao620w8ecg4' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:B7:no:A1:B7:0' header='yes' outcome='6'>
            <column datatype='string' name='continent' ordinal='0' />
            <column datatype='integer' name='TotalDeathCount' ordinal='1' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:B7:no:A1:B7:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>continent</remote-name>
            <remote-type>130</remote-type>
            <local-name>[continent]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>continent</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_B6DA679C794047E79CCA8EB0D77E6665]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>TotalDeathCount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[TotalDeathCount]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>TotalDeathCount</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_B6DA679C794047E79CCA8EB0D77E6665]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Total Death Count' datatype='integer' name='[TotalDeathCount]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Sheet1' datatype='table' name='[__tableau_internal_object_id__].[Sheet1_B6DA679C794047E79CCA8EB0D77E6665]' role='measure' type='quantitative' />
      <column caption='Continent' datatype='string' name='[continent]' role='dimension' type='nominal' />
      <column-instance column='[continent]' derivation='None' name='[none:continent:nk]' pivot='key' type='nominal' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:continent:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;North America&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Africa&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Oceania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Nepal&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Sheet1' id='Sheet1_B6DA679C794047E79CCA8EB0D77E6665'>
            <properties context=''>
              <relation connection='excel-direct.1ue04h21ceaua91grao620w8ecg4' name='Sheet1' table='[Sheet1$]' type='table'>
                <columns gridOrigin='A1:B7:no:A1:B7:0' header='yes' outcome='6'>
                  <column datatype='string' name='continent' ordinal='0' />
                  <column datatype='integer' name='TotalDeathCount' ordinal='1' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource caption='Sheet1 (Tableau Table 3)' inline='true' name='federated.1o8x5p406dk1i310qusjx1ulzqw8' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Tableau Table 3' name='excel-direct.1w0et360mkvsa9132jr5g1n9xac3'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/user/Downloads/Git from Snowball/Project 3_SQL_World Covid Deaths and Vaccinations/Tableau Table 3.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.1w0et360mkvsa9132jr5g1n9xac3' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:D256:no:A1:D256:0' header='yes' outcome='6'>
            <column datatype='string' name='location' ordinal='0' />
            <column datatype='integer' name='HighestInfectionCount' ordinal='1' />
            <column datatype='integer' name='population' ordinal='2' />
            <column datatype='real' name='CasesPercentage' ordinal='3' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.1w0et360mkvsa9132jr5g1n9xac3' name='Sheet1' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A1:D256:no:A1:D256:0' header='yes' outcome='6'>
            <column datatype='string' name='location' ordinal='0' />
            <column datatype='integer' name='HighestInfectionCount' ordinal='1' />
            <column datatype='integer' name='population' ordinal='2' />
            <column datatype='real' name='CasesPercentage' ordinal='3' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:D256:no:A1:D256:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>130</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_C9A0A1B5171A4EEEB580EC97DF158AA8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>HighestInfectionCount</remote-name>
            <remote-type>20</remote-type>
            <local-name>[HighestInfectionCount]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>HighestInfectionCount</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_C9A0A1B5171A4EEEB580EC97DF158AA8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>population</remote-name>
            <remote-type>20</remote-type>
            <local-name>[population]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>population</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_C9A0A1B5171A4EEEB580EC97DF158AA8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>CasesPercentage</remote-name>
            <remote-type>5</remote-type>
            <local-name>[CasesPercentage]</local-name>
            <parent-name>[Sheet1]</parent-name>
            <remote-alias>CasesPercentage</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Sheet1_C9A0A1B5171A4EEEB580EC97DF158AA8]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Cases Percentage' datatype='real' name='[CasesPercentage]' role='measure' type='quantitative' />
      <column caption='Highest Infection Count' datatype='integer' name='[HighestInfectionCount]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Sheet1' datatype='table' name='[__tableau_internal_object_id__].[Sheet1_C9A0A1B5171A4EEEB580EC97DF158AA8]' role='measure' type='quantitative' />
      <column caption='Location' datatype='string' name='[location]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
      <column caption='Population' datatype='integer' name='[population]' role='measure' type='quantitative' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Nepal&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='Sheet1' id='Sheet1_C9A0A1B5171A4EEEB580EC97DF158AA8'>
            <properties context=''>
              <relation connection='excel-direct.1w0et360mkvsa9132jr5g1n9xac3' name='Sheet1' table='[Sheet1$]' type='table'>
                <columns gridOrigin='A1:D256:no:A1:D256:0' header='yes' outcome='6'>
                  <column datatype='string' name='location' ordinal='0' />
                  <column datatype='integer' name='HighestInfectionCount' ordinal='1' />
                  <column datatype='integer' name='population' ordinal='2' />
                  <column datatype='real' name='CasesPercentage' ordinal='3' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Total Cases and Deaths</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (Tableau Table 1)' name='federated.0ji5wbp17asrc91434k2e0kieybm' />
          </datasources>
          <datasource-dependencies datasource='federated.0ji5wbp17asrc91434k2e0kieybm'>
            <column caption='Death Percentage' datatype='real' name='[DeathPercentage]' role='measure' type='quantitative' />
            <column caption='Total Cases' datatype='integer' name='[Total_Cases]' role='measure' type='quantitative' />
            <column caption='Total Deaths' datatype='integer' name='[Total_Deaths]' role='measure' type='quantitative' />
            <column-instance column='[DeathPercentage]' derivation='Sum' name='[sum:DeathPercentage:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total_Cases]' derivation='Sum' name='[sum:Total_Cases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total_Deaths]' derivation='Sum' name='[sum:Total_Deaths:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ji5wbp17asrc91434k2e0kieybm].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ji5wbp17asrc91434k2e0kieybm].[sum:DeathPercentage:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ji5wbp17asrc91434k2e0kieybm].[sum:Total_Cases:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ji5wbp17asrc91434k2e0kieybm].[sum:Total_Deaths:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0ji5wbp17asrc91434k2e0kieybm].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.0ji5wbp17asrc91434k2e0kieybm].[sum:Total_Cases:qk]&quot;</bucket>
              <bucket>&quot;[federated.0ji5wbp17asrc91434k2e0kieybm].[sum:Total_Deaths:qk]&quot;</bucket>
              <bucket>&quot;[federated.0ji5wbp17asrc91434k2e0kieybm].[sum:DeathPercentage:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.0ji5wbp17asrc91434k2e0kieybm].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0ji5wbp17asrc91434k2e0kieybm].[:Measure Names]' value='95' />
            <format attr='height' value='24' />
            <format attr='text-format' field='[federated.0ji5wbp17asrc91434k2e0kieybm].[sum:DeathPercentage:qk]' value='n#,##0.00;-#,##0.00' />
          </style-rule>
          <style-rule element='header'>
            <format attr='background-color' scope='cols' value='#c0c0c0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <text column='[federated.0ji5wbp17asrc91434k2e0kieybm].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='size' value='1.6151933670043945' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols>[federated.0ji5wbp17asrc91434k2e0kieybm].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{5072981D-EE0C-4CDB-89FE-0644CFC403DF}' />
    </worksheet>
    <worksheet name='Sheet 2'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Covid Deaths by Continents</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (Tableau Table 2)' name='federated.1d3a8ns1fjx9of133km941dh2p4t' />
          </datasources>
          <datasource-dependencies datasource='federated.1d3a8ns1fjx9of133km941dh2p4t'>
            <column caption='Total Death Count' datatype='integer' name='[TotalDeathCount]' role='measure' type='quantitative' />
            <column caption='Continent' datatype='string' name='[continent]' role='dimension' type='nominal' />
            <column-instance column='[continent]' derivation='None' name='[none:continent:nk]' pivot='key' type='nominal' />
            <column-instance column='[TotalDeathCount]' derivation='Sum' name='[sum:TotalDeathCount:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <manual-sort column='[federated.1d3a8ns1fjx9of133km941dh2p4t].[none:continent:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;North America&quot;</bucket>
              <bucket>&quot;South America&quot;</bucket>
              <bucket>&quot;Asia&quot;</bucket>
              <bucket>&quot;Europe&quot;</bucket>
              <bucket>&quot;Africa&quot;</bucket>
              <bucket>&quot;Oceania&quot;</bucket>
            </dictionary>
          </manual-sort>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1d3a8ns1fjx9of133km941dh2p4t].[none:continent:nk]' value='179' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1d3a8ns1fjx9of133km941dh2p4t].[none:continent:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.1094474792480469' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1d3a8ns1fjx9of133km941dh2p4t].[sum:TotalDeathCount:qk]</rows>
        <cols>[federated.1d3a8ns1fjx9of133km941dh2p4t].[none:continent:nk]</cols>
      </table>
      <simple-id uuid='{E7E857F7-2B40-418F-84F3-DCC8332102AB}' />
    </worksheet>
    <worksheet name='Sheet 3'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Percent Population Infected by Country</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (Tableau Table 3)' name='federated.1o8x5p406dk1i310qusjx1ulzqw8' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1o8x5p406dk1i310qusjx1ulzqw8'>
            <column caption='Cases Percentage' datatype='real' name='[CasesPercentage]' role='measure' type='quantitative' />
            <column caption='Location' datatype='string' name='[location]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[CasesPercentage]' derivation='Sum' name='[sum:CasesPercentage:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1o8x5p406dk1i310qusjx1ulzqw8].[Longitude (generated)]' field-type='quantitative' max='22298110.323046517' min='-16143603.703862317' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1o8x5p406dk1i310qusjx1ulzqw8].[Latitude (generated)]' field-type='quantitative' max='15246745.996232118' min='-9636687.9579532687' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1o8x5p406dk1i310qusjx1ulzqw8].[sum:CasesPercentage:qk]' palette='red_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.1o8x5p406dk1i310qusjx1ulzqw8].[sum:CasesPercentage:qk]' value='Percent Population Infected'>
              <formatted-text>
                <run>Percent Population Infected</run>
              </formatted-text>
            </format>
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='b01002_001e' value='false' />
            <format attr='enabled' id='b01002_002e' value='false' />
            <format attr='enabled' id='b01002_003e' value='false' />
            <format attr='enabled' id='dp02_0001e' value='false' />
            <format attr='enabled' id='dp02_0015e' value='false' />
            <format attr='enabled' id='dp03_0027e_plus_dp03_0029e' value='false' />
            <format attr='enabled' id='dp03_0028e' value='false' />
            <format attr='enabled' id='dp03_0030e_plus_dp03_0031e' value='false' />
            <format attr='enabled' id='dp03_0062e' value='false' />
            <format attr='enabled' id='dp03_0088e' value='false' />
            <format attr='enabled' id='dp04_0001e' value='false' />
            <format attr='enabled' id='dp04_0046e' value='false' />
            <format attr='enabled' id='dp04_0047e' value='false' />
            <format attr='enabled' id='dp04_0089e' value='false' />
            <format attr='enabled' id='dp05_0001e' value='false' />
            <format attr='enabled' id='dp05_0002e_div_dp05_0003e' value='false' />
            <format attr='enabled' id='dp05_0032e' value='false' />
            <format attr='enabled' id='dp05_0033e' value='false' />
            <format attr='enabled' id='dp05_0034e' value='false' />
            <format attr='enabled' id='dp05_0039e' value='false' />
            <format attr='enabled' id='dp05_0047e' value='false' />
            <format attr='enabled' id='dp05_0053e' value='false' />
            <format attr='enabled' id='dp05_0066e' value='false' />
            <format attr='enabled' id='dp05_0077e' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0' />
            <format attr='map-style' value='outdoors' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
            <format attr='geo-area-type' value='State' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.1o8x5p406dk1i310qusjx1ulzqw8].[none:location:nk]' />
              <color column='[federated.1o8x5p406dk1i310qusjx1ulzqw8].[sum:CasesPercentage:qk]' />
              <geometry column='[federated.1o8x5p406dk1i310qusjx1ulzqw8].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1o8x5p406dk1i310qusjx1ulzqw8].[Latitude (generated)]</rows>
        <cols>[federated.1o8x5p406dk1i310qusjx1ulzqw8].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{3EC3602A-1E81-4854-8062-DE6B8E993C60}' />
    </worksheet>
    <worksheet name='Sheet 4'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Percentage of Population Infected by Country</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (Tableau Table 4)' name='federated.1oh2bw305qrqva12iwb450zyyf34' />
          </datasources>
          <datasource-dependencies datasource='federated.1oh2bw305qrqva12iwb450zyyf34'>
            <column caption='Percent Poplation Infected' datatype='real' name='[PercentPoplationInfected]' role='measure' type='quantitative' />
            <column-instance column='[PercentPoplationInfected]' derivation='Avg' name='[avg:PercentPoplationInfected:qk]' pivot='key' type='quantitative' />
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column-instance column='[PercentPoplationInfected]' derivation='Avg' forecast-column-base='[avg:PercentPoplationInfected:qk]' forecast-column-type='forecast-value' name='[fVal:avg:PercentPoplationInfected:qk]' pivot='key' type='quantitative' />
            <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
            <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
            <column-instance column='[location]' derivation='None' name='[none:location:nk]' pivot='key' type='nominal' />
            <column-instance column='[date]' derivation='Month-Trunc' name='[tmn:date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1oh2bw305qrqva12iwb450zyyf34].[none:location:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;United&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:location:nk]' member='&quot;United States&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1oh2bw305qrqva12iwb450zyyf34].[none:location:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1oh2bw305qrqva12iwb450zyyf34].[tmn:date:qk]' scope='cols' value='Year' />
            <encoding attr='space' class='0' field='[federated.1oh2bw305qrqva12iwb450zyyf34].[fVal:avg:PercentPoplationInfected:qk]' field-type='quantitative' max='100.0' min='0.5' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[federated.1oh2bw305qrqva12iwb450zyyf34].[none:location:nk]' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1oh2bw305qrqva12iwb450zyyf34].[none:location:nk]' />
              <color column='[federated.1oh2bw305qrqva12iwb450zyyf34].[none:Forecast Indicator:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-range-scope' value='multi-mark' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-mode' value='line-ends' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1oh2bw305qrqva12iwb450zyyf34].[fVal:avg:PercentPoplationInfected:qk]</rows>
        <cols>[federated.1oh2bw305qrqva12iwb450zyyf34].[tmn:date:qk]</cols>
        <forecast-specification auto-forecast-agg='true' band-confidence-level='95.000000' enabled='true' fill-type='fill-missing' ignore-last='1' model-type='auto-season' range-type='auto' show-prediction-bands='true' />
      </table>
      <simple-id uuid='{A2621F9B-EABD-45C8-8F57-A6EDD45EB691}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size sizing-mode='automatic' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98118' id='16' param='horz' type-v2='layout-flow' w='98872' x='564' y='941'>
            <zone h='98118' id='12' param='horz' type-v2='layout-flow' w='98872' x='564' y='941'>
              <zone h='98118' id='7' param='horz' type-v2='layout-flow' w='98872' x='564' y='941'>
                <zone h='98118' id='5' type-v2='layout-basic' w='98872' x='564' y='941'>
                  <zone h='49059' id='3' name='Sheet 4' w='85402' x='564' y='50000'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='49059' id='8' name='Sheet 4' pane-specification-id='0' param='[federated.1oh2bw305qrqva12iwb450zyyf34].[none:location:nk]&#10;[federated.1oh2bw305qrqva12iwb450zyyf34].[none:Forecast Indicator:nk]' type-v2='color' w='13470' x='85966' y='50000'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='18588' id='9' name='Sheet 1' w='21157' x='78279' y='31412'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='49059' id='10' name='Sheet 2' w='29337' x='48942' y='941'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='30471' id='13' name='Sheet 2' pane-specification-id='0' param='[federated.1d3a8ns1fjx9of133km941dh2p4t].[none:continent:nk]' type-v2='color' w='21157' x='78279' y='941'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='49059' id='14' name='Sheet 3' w='48378' x='564' y='941'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                </zone>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1150' minheight='1150' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='20' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98118' id='19' param='vert' type-v2='layout-flow' w='98872' x='564' y='941'>
                <zone fixed-size='280' h='49059' id='14' is-fixed='true' name='Sheet 3' w='48378' x='564' y='941'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49059' id='10' is-fixed='true' name='Sheet 2' w='29337' x='48942' y='941'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='30471' id='13' name='Sheet 2' pane-specification-id='0' param='[federated.1d3a8ns1fjx9of133km941dh2p4t].[none:continent:nk]' type-v2='color' w='21157' x='78279' y='941'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='141' h='18588' id='9' is-fixed='true' name='Sheet 1' w='21157' x='78279' y='31412'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='49059' id='3' is-fixed='true' name='Sheet 4' w='85402' x='564' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='49059' id='8' name='Sheet 4' pane-specification-id='0' param='[federated.1oh2bw305qrqva12iwb450zyyf34].[none:location:nk]&#10;[federated.1oh2bw305qrqva12iwb450zyyf34].[none:Forecast Indicator:nk]' type-v2='color' w='13470' x='85966' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{F23B1B46-B7F6-46A2-B787-C0A5CB754430}' />
    </dashboard>
  </dashboards>
  <windows source-height='93'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='209'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0ji5wbp17asrc91434k2e0kieybm].[:Measure Names]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{262CB3F8-CEE0-4506-AC08-67332DD517D7}' />
    </window>
    <window class='worksheet' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='85'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='100'>
            <card pane-specification-id='0' param='[federated.1d3a8ns1fjx9of133km941dh2p4t].[none:continent:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1d3a8ns1fjx9of133km941dh2p4t].[none:continent:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D9C9BE30-19BA-4BE4-9D24-D03F2788022B}' />
    </window>
    <window class='worksheet' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1o8x5p406dk1i310qusjx1ulzqw8].[sum:CasesPercentage:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1d3a8ns1fjx9of133km941dh2p4t].[none:continent:nk]</field>
            <field>[federated.1o8x5p406dk1i310qusjx1ulzqw8].[none:location:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{7B48620A-1378-4DEE-9294-8E82032D6467}' />
    </window>
    <window class='worksheet' name='Sheet 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1oh2bw305qrqva12iwb450zyyf34].[none:location:nk]&#10;[federated.1oh2bw305qrqva12iwb450zyyf34].[none:Forecast Indicator:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1oh2bw305qrqva12iwb450zyyf34].[none:Forecast Indicator:nk]</field>
            <field>[federated.1oh2bw305qrqva12iwb450zyyf34].[none:location:nk]</field>
            <field>[federated.1oh2bw305qrqva12iwb450zyyf34].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{AFA582C1-27D3-4468-8874-88B797B44D38}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Sheet 1' />
        <viewpoint name='Sheet 2'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.1d3a8ns1fjx9of133km941dh2p4t].[none:continent:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Sheet 3'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Sheet 4'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.1oh2bw305qrqva12iwb450zyyf34].[none:Forecast Indicator:nk]</field>
              <field>[federated.1oh2bw305qrqva12iwb450zyyf34].[none:location:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <device-preview visible='true' />
      <simple-id uuid='{8B9E41DD-B149-4142-95AD-D926DF93E190}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='48' name='Sheet 1' width='192'>
      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
      GtOrvrUAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAReklEQVR4nO3d6W8j933H8ffMkOIlipdEHZSoa7XaM2s7TuogTuw2bREgLeDH+QP61/Qv
      6PMW6IMCRQPYbRqkOeBkk2ZtZy3tpZMSJYoSKVESjyHn6gOt7RhL16QkjsTM9wUsKJHizJfL
      +XDmN/zyR8VxHAchPEq96gKEuEoSAOFpEgDRc5ahs7q2iX3VhbShyBhA9NqHv/gZc3dex9Qr
      nOgqfvMEUwvy6MPf8N333sMqbmFoUQJ2DV80yeHuNj7V5o/bdX783l/39FXa18NlCwGA7Tj4
      NI0na5sohoMZ8OFXFCazWfwBh639MopSZP3pGosP7uM4PprlIpmJBZQe1yZ7ANFzVqvB6uYu
      o8NRqi2VaNgPQLN6jC+eRjObADROjrD9EaLhII5tc3h4RHZ2pqd7gJ4FwLZtVFWGGOJ663gL
      dRwHwzBwHJtGQ8dxbPRm8/NL27ZxbAv7ZZ5kxyL6QcdjAMvQebaa40Z2nNzGOgSiGK0aqhbC
      MpsEQkMEVYOx7Bw+xT4LhIRAXHMdB8A3ECIZj6IqCuHkOH5LJzA8wup6hZnJJIX9Q3TVT1ZT
      4OXQRQ6BxHXXcQAMvUqlfIhpmNRqNTKTUxwclHhwb5p8ocT8/DwDqkXDsAkPaAAoSq/H8EJc
      TM8GwZZloWlaLxYtxKWRYxThaRIA4WkSAOFp17YVon5SZn33iHu3bnB6eMBOucZwBJZWdxhN
      RFjZOeCHf/MDKoVNGmqUeinHqR0h4W9wZIb49oPbV/0QRB+4tnuAQDgGTguA8FAC26wTS42S
      GgyQvfWA7Fgav6qQTI1Qq59S2M0TDAaYyM7ic8wrrl70i2u7BzgtF/j9w4eEBuMErAa/e/iQ
      4naOE2uA8bEtBkemKJfLHO9t8HB5h28vjLO6vkbu0yLxmW/gQM8bqUT/u/anQUv7+yRG0mht
      tub9/SLp9OiF1yG868oD4DgO7z9c7UUJr0gOBfnO3SlX1iX6w5UfAjkO/NNPHrmyrjvTwxIA
      8SXXdhAshBs6DoBlttjO72I2G+QLRQy9xrPnK9RrJzxfWef4tEr9tIJuSgeo6B8dHwIpiobt
      WCiaH9syKO+XGBsfYunpNvPZJJvr6yi+APfvxLAsC8uyOmqHtl1smXYA05RTpOILXXweoMH2
      5iY+VSW3sUE2M8HO6jZD0Tgb+QJDsWFCapO6YRN52Q3aySDYtt0LgAL4fFc+7BHXSMdbgz84
      yNvf+x4AmUwGgOne1CSEa2QQLDxNAiA8TQIgPE0CIDxNAiA8TQIgPE0CIDxNAiA8TQIgPE0C
      IDxNAiA8reNeILPV4Pn6NtmRGCu5XcbHRijs7ZMaGaFcPiQ1PEpQaREbnSLok0/jiv7Q1eS4
      8aEIR7UmDxYmeLRW4e6daZY/3WNxbpyNfAG0AOkJpB1a9I2uJsctFvYYGx9jaaPEzekx1l4U
      mJ8bZWuvxEQmS1A1pB1a9JWu2qHf+OY3AZiYOGuHjidSAKRSIz0oTYjek0Gw8DQJgPA0CYDw
      NAmA8DQJgPA0CYDwNAmA8DQJgPA0CYDwNAmA8DQJgPC0rjvD9ndz7O0fEUsmKJVKxGJJjo8r
      xJMjBJUWqcystEOLvtF1AKLRGMWdPMVykDuL0zx5UmRhdoLcTpFTzc+EJu3Qon90HQBVVVGj
      ae5PjbK+ucPtxQzbu/tkp2cIqqa0Q4u+0vXWEIgMcffWEAB3755d3hmKX25VQrhEBsHC0yQA
      wtMkAMLTJADC0yQAwtMkAMLTJADC0yQAwtMkAMLTJADC07oOgOM4mKb58vKs4c182fj22T8h
      +kXXvUClnU3yxTKRWIJa9ZhgMEpDrxGJJggpBqPZeQLSbyb6RPebquZDU0FvWszMTLCyWmZu
      Ks1OsYyu+pmUdmjRR7oOQCwWp3zSYGpygp3dIt+4M8124YDZuTkCqoVu2ISlHVr0ia63hoFw
      lFuLUQBuLgwCsDA/eLlVCeESOQskPE0CIDxNAiA8TQIgPE0CIDxNAiA8TQIgPE3eFeqxg50N
      fvvwD8zcvkc+l+fe3XmWn2/wzvff5XhvndXdE7LDIbYrBm/dn+WXD5f5wbvfueqyPUMC0GMj
      EzPM3KjgNA3efnOaQj3G6HAKTVVYW1lDV8M8e5FHCaX4dPkZPsXBcUCR2SVdIYdAPWbbTUKR
      FKPxAL96uMpBfon9coWtXI6JmSym0WRicgqjoaOoCsX9IoZ91VV7R9d7gNNKia3tAmNTWcoH
      JbKZUbYLB4yNpvFjQnBIJsf9E6oWZOFGFoC/m138/PrT01Oi0ShzN+4AcP/B2fWvvf4t12v0
      srYBaDaOKR0a2HaTqanMl26LxodJVuvUjg4ZGQnz+EmO2akE6+vrKNoA9+8Mea4b1HrxPk7h
      k67u4wf0c6xLe/MfUCLD57inaKdtAHY3V3i0XODeG6+/cptjmzQtlaEg5HJ7RAcHyRcOCEfj
      hJQWDQ92g5o7jzCW/u3Sl9uO/7Ufo/nGXFmXF7TdGiZnb/DJ0jZtD2QUjWw2gwIMjUygaRqW
      Zb3c2B2c9vcS4lpqGwBV8xMO+mjozVduUxTl8038s1fTL15VFdn8RV9pexZIUf3M3rhBqVhw
      ux4hXNX+NKhj8fjR70mOTbpcjhDuahsAy2wQS89wvL/rdj1CuKrNGMCmdKhzYzZN1fS7X5EQ
      LmqzB7B59umn1PQmleNT9ysSwkVt9gA+3n73HU6qdW4nEu5XJISL2o4BVNXi8UcfsbKRd7se
      IVzVJgAWnz76iKNa3f1qhHBZmwBopIYH8WlhDstl9ysSwkVtD4GS6UkGlBbxZNLteoRwVdsA
      +P0q27kChd2dV26zWnWeLD+nWj1mafkppycVnjx7wWHlhGqljG7K7NCif7TtBdJ8IcYmM4yP
      vLoH2Mnv4Dg6ua19ZubSPF3aYWFuhM3cBmgBHtxNeq4d2s3HYFkWjkzwe2naBsBxbI5Lu1Rn
      Zl65bXQ0zcnGFqlklLWVXWZmRtkqlBibmCSomNQNm4jX2qEVBevSl9qepmloMsHvpWn7TvCH
      v/w12YV5nDYbZyAS4969+wCMj531pY+MpHtapBC90mYMYFA90TEMk9PjY/crEsJFbfYAA/zt
      3/8I23FQOziEEaKftT0Eevr4Yyr1JiMTM9x++YFuIf4ctX0j7Pa9BT7+3Sfk89IKIeDn//kf
      PFvL8eH//IyPHi/zs1/8CgD9tMxPP3ifZy+e8sEHP2VzY50P/v1fWd6qXHHFnfuKT4QF+P67
      3yEaHXK7HnHtWDi2Q0NvkYiHMR0fE+mzkx62aVJv6mw9eUFLA1OLkpm+ya2p2BXX3Lm2AVh/
      9jF/fLLBQGDA7XrEdWNbRIbi2Ead/aMGKgYrTx+zvPSY3P4pkWCYzM2bhBUF7BaDiWG0PprW
      ru0J5flbr7GxfYLRarldj7hu1AHeevudL1315oN7tHQddWCA24s3ALh75/ZVVHdhbQLgYFoQ
      DA4QDAbdr0i4zigWqfzzv7iyrtBrrzH4V3/pyro60SYATf7rJ//NyNQY4VDI/YqE65xajcbv
      /9eVdWmJ69Vg2SYAKrcfvM7MXAZVlblzxZ+3tm+ELSzOuF6IEFeh664qvZzncb7KdHqQnUKR
      eCLFUaVCIpUmSIvkxLTMDi36RtcBsLUgQaVE6cjH4u0Zlpf2uDk3wWa+wIk2wPgU0g7dQ71o
      h7Ys976QwHHsnjwH59V9X62qoal+MhMp1tcKLC6Ms104YCo7Q1CVduhe60U7tK25N9ZTFLUn
      z8F5dV1JeCjB3Xtn06XE42eXsfj1GtkL0Sk5zSM8TQIgPE0CIDxNAiA8TQIgPE0CIDxNAiA8
      TQIgPO36vCUnRC84Do8f/ZbcwTFa0yA6nqGy/YJoZpF3vjUrARB//uJDMQ50jeFhixd7uwz6
      Qmdf56sNne8QqHJ0iGm2yG3vYJtNtvK76HoTs1mnKZPjimvF4fC4QjKRRFEU3vzmXzCSTpJK
      hHmxmu9+D2C16jx5+pzM2CiBiI+PHq8xkR5kZW0DTVO5tbiAbdvYdmcdhp10jF4Wh7Nuyktf
      rouPwbZtuOTH4GZDouM4PXkO/j/333jr5U9zAGRHv/v5bV0HYH+vgGHo1BotbNXE51NpNJto
      Ph8+LCzbwacqZ98o39HsAO5+dqCzmrpe6OUv8ytX1en/azfLvNTFfe26Lrt+3TT5x1///Fz3
      7ToA49l5hsenUFWVo8oJM1NRypUqsaFBNMXBdL54kjr5SKXb7dC9+JinmxHu9P+122W6pxf1
      Q80wznXfcw2C/f6z+YKGU8mXl198m6TMJCT6ibwPIDxNAiA8TQIgPE0CIDxNAiA8TQIgPE0C
      IDxNAiA8TQIgPE0CIDyt6wC06qc8e76CrtdZWdugqddYXc9RrdVp1k7QpR1a9JGue4FUvx+z
      dsJmTiE9EuaPSzlmMjHW1tZQfAHu347K5Lg9JJPjvsq8QHt11wFoNhr4fGDaNruFEpFIkGL5
      kGB4iKDSRDcdQn6ZHLdXZHLcV/mc8we460pCkSjZhTuEggGaTYNAwE+zaTAw4EfBwXa5v1+I
      i+j+EEjzEQ6d3S0YDHzpEuDrX/OFuD7kLJDwNAmA8DQJgPA0CYDwNAmA8DQJgPA0CYDwNAmA
      8DQJgPA0CYDwtO6b4eqnrG/myUxOkN/ZY3pyjK3dA8bHRvFjoEUSBH3SDyT6Q9cB8AVCJKNB
      CnslJicTLD/Lc2MmxebmBqovwP07CWmH7iFph36Vq+3Qlb0tNvZPyAzHWFnZIh5PsLFdYCgx
      TEhpUTdsIgPSDt0r0g79KlfboVOZOVKZs5+npmfPvWIhrgMZBAtPkwAIT5MACE+TAAhPkwAI
      T5MACE+TAAhPkwAIT5MACE+TAAhPkwAITztfO/TOPplEmNWtAslUisPDCsnhNEGlRXwsK+3Q
      om90HYBAOMpQ5IRa3WDx9jTLS3vcnBtnM18ALcBoBmmH7iFph36Vq+3QjdMKxb0ik5OTrK/u
      sTA/Rn7vgMzUNEHFlHboHpN26Fe5Ozt0NM4bb7wBQDqdBiCRTJ27ACGukgyChadJAISnSQCE
      p0kAhKdJAISnSQCEp0kAhKdJAISnXTgAhl5lZW2T02oNvXos3xQv+sqFA1AsHhCPDLC+vs6L
      3B4B+Z5U0UcuHACfBjvFEsHIELGQim6411glxEVduCtpNDNNatRG01QUBRz5pnjRRxSnk57l
      LjiOg23b2LaNqna2g9k/ql1mCV/J71NJREMd/W039TuNCo7hzmNQI2nQ/B39baePwTFNrKOj
      i5bWETUUQh0c7OhvO67fcajojXPVc+kB+Ew3G9B11O/1O46D4zh9/RjceA56tvTzFL6bW6V8
      WmWvUPrS9dVqlXK5/PnvR/sFdg4Ov3I5tVqNi6b6PPW36icsLy1RqX751aher2GZOuWj6tkV
      jsXyk2dfWaNtGdTrra7X/6cURenJxnO0t81u+eTsF9uk2tAvfR2fucz6ny19Qn7v4JXrL//T
      IRfg+AJU9vPo1RbFvTxBn5/WgJ+T0gGJZJzc1jZ3732Dg6NjbFRWyrscndQJDcY5yj8nODKL
      z2kxlByG7Q1C8SSPH/6Gu9/9IdmRzna7F6FqGjg2x/sFcuvH+NQgYyNhnm4dMZmOc7Bf4ng0
      w1hUpdmos72+yc5RiQFVJezz83Rjh7uLWcKDIWpHBpamYNfLlI0g7771Ws/r78TBcRUbnd3n
      HzM6NYcB/OoPv+PBOz8ik+zs8PIq6E2dQcsgt1OAZoVSxSQcVK5XAALBEIMBjV2zhtpsEAxF
      mJzLUlRstEiMyYkAChYKCqAQS42RGAZQ8NtZBhMpwoMRmvU6hh3AaemMzcyj2O6cmbI/O+RQ
      FRQ0IpEAW9t7ZManUR2D2Rs3wbKoNaokkglausHCwgIaFif7FRZv3iCWjDEcD7LbrFBt6QyE
      o4yoAVfq/1qOBbaCo0J6dJRWq4V/QCMzN49zgY8luiEQCIKiUi0X8QcCTM/O0ajs8n9uYDqv
      AYB2zAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 3' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOy9Z5Bdx5Xn+ctrnrf1yjsUUAAKhjAkCJAAQZEURYpGbLmWNJIoTc+0Ynui
      Z7q3O2ImpndiPyhiv+xubExEr2Y0I22r1VKrm1LLk00jegeCBAjvgQLK+6rn3X333sz98Mqj
      CrZAQhPzr6ioqld582bee87Jk8el+MdzE2rC1rjtUcpiFJJ0pj7k7roCkwU4O6kjDJMH2kpo
      Qix5mUIBEoUEBAIdAfTkfLzZ8Id4NVjV8ybb6MdvQNGFo4UontoWWkSelkofYxWdqdhmLo5l
      eSTYh1cDY+nbzWLc0njJdw9WqA6cCkIpRG0LqlKCUgHh8yNcFxWIrPST+p+4DhgTtsagrX/c
      41gWSkpE3wnuL71Ni0gyVDB5qdfic1sE9QnFVFlnYBg641UCn3flPOJXAAg0BBrpsuCftc9T
      zBXovPg6d2oniXtcQFGsCAbSbeQm8qjV7cSSgzSaiuzkELVtn0Yf68fvucJ4leJQOcEr/p3U
      pc7ycOXn6EjGVIjn1b/iCxf+hrwZ4Y32zxMaO0dm4ydv4dO7PaBcF4RAaLefoDU+7gFcCUop
      Wnpf4wvGuxgRRcyvsQELqQSaAJ8paDEVSqmZK+ZdO9dP2Rb4PZArKw6MBfiw6TNUGrr46pn/
      SqM+weGkn082lAAouhqbvFnWBzKcuNBLvEkigFafgz76HsYVZIVSit6SyRFjNX9uv0TQL8Bf
      HZddBn1qiE5fkQuOFzfWRNq2UekJ7hh4nTY5wflQF5c6HkLot/VruS4oKel4/3sMbngKN9GG
      ykxWmSGS+LiHBtzmDICSFEeHeD6wmm1GL+GCYm2dQBcwX9oLIQCFUjCjCYnZNjo9U4r+jOCE
      ZwuV2jVU6jegCcG4Hmc947R4y1xIw9ooaFLSqGXx67AuXmUkTYOwLgloSbxXEGJCQIvX5l/I
      QwTN6kBcpXivVM95rYm/KP+WmAcmRYJIqo+MN4h/+DRPiJPE/HCfM8pvTo1weMs35ibye47w
      6CkG7vw6MhAFwO/k8Vhpsv+TAa4ApQgOHcXxhknd8zTm8V/QHIHaQJXIM2VBzD+/uWIgq1Gy
      XLrqxTx9v0pEzVE4W4jwWOwSkzLDm2xDA0LCRUPQFVNUXIUQgtYgzKwkTX7FDKMZ4up6Pwg8
      OnhmV4nqSDrUJHu94wgBrlRcMlt4ovcfcFxJTnqIxqv30QSs01IckhKh375q6TVj6ByJ3rfx
      aBHS6x9EJtooJzoo3+LbKqWmheLVcfspZVTJTy+leXTql3gzQ4RCPhzXJWdJnh1IcDEpONAP
      E3kJQH9KcWbKZH29QuEyXxXqTSouJHU+tybDmKjlzdavER0/y+rzL1Ip5WfbefRbIXEFphC0
      BedeyJlymJidZlPIYnvM5v6awuwKNmqZvND2h7+/xD9P7VRWiVB+hHRZkOz8BG5NKzI9gZIS
      ihnqhg6s2G0TAx/Q1vt69b62xYaD/x2Rn7qma29LBmjsf5tP2u+xNZGjvnCJgcQOXh2r592x
      GPlcCYWgq05RG6rK2CHLT8JnM5jRAG3a0lMluI4awa5WycV8kPcaPks0O8S3pn7OV9z9bDDG
      PsJZKWwJR5xG/kCcQFvEbxcKXn5U92Vy0ZaPcEwrB+VUUH0nqwQO+IdP0pQ9R1QUqb30FkZ6
      hG0XfwFWka7+l7krs3/e3u3KiPbsg1Ju2f9PxdczEN+Cnp3gC93f4Wstw2wee+ea+r7tGEAp
      STpVIGI6mLrGHvcQdiCB0bKWzbEctVEPdzVXODQseLtXpz/v4ZBvJykthu0KUIKq2iJmN8LJ
      suA34S8gPQF2jr5Bjeng0xRR49pewEqh5MCWyiUi0xt3pRQTJYXtKo6Za8jWr/9Ix3OzUFIS
      HTxE/VvfpenYL3l44reEx8+glMKw8pSTSdr9JYSm0TT4Hm1Bh9VHfsx96iQnY/dcm5qiFGaw
      BuUNLN8mFIdoHTW977IlnEEIwZPGYeIjR6/a/e23B3Bd7igdZVII1iRgXSjN6u7fcqntIc66
      22mxDvBKMsyxyFpiPpfXjVWsH3mBpkiaNTVzOrtSCqlgNKN4U99JoamTu0/+hAc9vYC4Zh1x
      JREyYXttlekqSjBU1HhWbSVj1GJv3IvQbr3q4xUKS63M3EMX3qEte5ILsU7WVS5SDjVSiLWD
      bVEulhjc9mVGlEQGIjw28BPWmVleWfdH/CDSgLgSQc+HEEzWb+RqI1ZKEfcJjOmldbTsIZVY
      ddXubzsGMEfP0xausKWxarc3NMXTjSd55uQoucYt2IEajhkdlISP3bmX+KL2Nol1M49n4WMS
      Ao6lI1zYsJfo8AmeNM9/LIQ/g/lqj1JQ55H8uXmEv+deLnwEer9QivV+m/6KQcJwKbgaeVdQ
      UAsVAQOFV1MU5JUVhELXA5yfaKPp1LOk402cXPd5lOuw9sJv6Y52YToWGwZeJhY0eL7mSUzT
      wK7tuCXvQBs6x07rCITAdhX5skSZ3qsyzu3BAKUc6/ue59zaLxKSOd5NNWGKYe5oqurzuiZZ
      FylwtJjmHrObHfUFjqRiZF2NRHBG5VmIYgVe7dY41bQHFYhSLMY4PBqhTuRZFZTckj3vFbHQ
      SffKeJAeGUdF6xnf8uhVX9RNYVrTuyNgc2dI8pBhcTIv6Ao6xAzFkazOGznP7MrQ7nEYv0bn
      qBVtYijShdm6EVM3sREMh9dDy2aM0bOkfA1cCKwmrDvkGzbcknkqpQg7Wd4ZDzOF4GzapD5s
      UDfwPlPRTlTd8ivB7bEHkJKgk4VCmoqj+LebBumsnfHeCgQm97SUuUudojsfplgRbIulGLX8
      pBfZ1CoSXuz2MFkSrK0TlJs2AWDXtvPs9r9kv2fTx0D8C6EU6Lj826ZBvLEahHkF1/IN36Sq
      7qCg3evyUNRGCI1aU5FyNXbFFLUeMDTBppDEnbcdulQxyatrIw3h8ePc9TilRAcugG5Qar8T
      oZuUW7YwdOdXKXfcheWLrfwcZ8YgBHXlYZ5qz/GB1c43OibZExqhZWg/Tyf/AazistfeHgwQ
      jHKk/YsQiFJsv5t/7G1lJG9QFV0zb0bgKsGIHaG/4EMI2BEe4+0enYl8tV2xojCFYk9LmZdy
      63m27uuIYHT2NkI3KHgiOB/t3vcyKAR3xir8P9qnGWzZteL9Gyj+Zb3FWq/Dw9EKtabi3ojD
      cEXje6M+9mcM3KqxBkfBb5MenBWQzVKIJR14wvBgx1uvqy9VzGIMnbnm9t3hzfx/7iPc77uE
      oSkKNjzSVkZJBVfYW30sKpAqFwlNdWMHaqjMPJhIAkF1OdP9Ac6lfbwwGGJvzShbmwVC6NzT
      4rCu2M3Lo7VsiJfojNusrakGuI1k4Z/O+PE3NJOKrqGw8S6Ex7/wvkrSWhnDuAUC93qgCUhL
      L9mOnQiPb8X7D+iKdr8kaipSFcVkQeAAO4IOr2ZM6j2SYwWdHWGXY3mdiyV9KS3yY4UIRKiU
      8gjpXpNxQGtZh1VqYv/5Ce4WR2iblnvniwZKaHj7juIm2nBDCz3QH8sKYE718qfaL/lG5oeI
      obOztmOoLmdnNnyN99d8k6Yag2xZkCtXl/JkUdKfMxk3Wzg2rGFLgetWp3BxQqLsCr7iJK43
      vID4VaVMdOAQXWd/yyf1ix/5fJeCB4nmVNCGz6943wVX8PykQdRQrPIrag0XHcVqn6TJI/kg
      Z/By2sP/2e/jhZTntiP+GWiJ5uuyjAl/iGz73VxKi2kfg6KEDz03wWOTvyZw/h1UZaHOrD/+
      p//x29mr7PZvFkopUBIhqvdxAzE+PD3FRu8IW+2TnE75kYk2VHIEvAGE0GgZeIs/TJxhba2G
      zxSMZBUHR7wcyjWQ8LtcypiMJyt01igMDTJlWF+rGNCamWzeifBWGUBVStx3+sd8g/fYro1i
      LvZAfQzI2vDP+RbS0Q5UOA7myq4CHlFVHNf6XTyawovC1DWiJqz2SXpLOnk5T12ZrxJ+/I/n
      puD6oxzx38mhfC2NhV5yjkHREezQ+9igDzNZhGx8zezcb7kKpAppto6/SogS77V/rerm1w3K
      HTu4MHCRx9aW+AvrBf7LcIT7Cm9RnPLy3upvMFx/N6/09bInPokjFY4Lxypt/PuN3ZQrIBPQ
      mxR4DQ0Q3NFUtfz4Cz30jF4CX5CG/v18IrufrcEs82ODPm4MV3z0bvocwuOFW5AP4Kq5uKV3
      Mia2o1ivQZMmOV3QsSRVop9u49VWzjdwO0CEYuRCu/g7uQOExqfPfZfmiEITgiey7/I9ay/C
      V/VD3FLRr6wSGy/8Ew3WIKHSxILd+K7ifvwBD/0pQcDU0JQkZ9bwSLyPT3Z/HxmIMeDvJOJT
      vNmjs3/QpCteIVOEs2OCeEBwZ+ucCVQIgVSKI+UWWLuD2NBR/p37CluDOZjOA7hdMEkIEa29
      JcQP4ChB2hFM2HC+qHO2olF0bAqu4LW0yUPRCnXGnNr5PxLxz4fQdLCKtGtTaEJQqCiOu21g
      FVF2BbiFK4AqFzAqBc52fpFM+hTCsRCBcHVgQnBw1VcQySFeEwaPpJ/jAd7gBf9jrE9349ds
      lFVkvPNRvjPWSHE1OP44ZiXH8GSMtuJ5pKwwkYfGaRpSCkbyBifFOoQQGCik0j52k+dS6Ams
      vrU3EJCRGv8w7qPdY/FUTYpaw0932QQBR4sGf1BT5KdTgas6u37fUTd+gm5a+JG8FzccwV3V
      ikqPI85/gNq099btAXz5cdr6X+NJ62XuMrp519qAm2gHQMuOgz+C8kfovPhb+kQLaU8tmZa7
      GR3L0WPF8BgCyx+nEmtDxprA9LBj6hUywTY2qEtICY6EmL9K4b+6FOW1mj/A7diO0HQKkWYu
      TpbR8lM0eBygGhqxXOrkR4WKC0d7M8THTjMVaUelJxChW2cjvztY4lghSJ3X5HjRYMzWcBU8
      HKtQY8Dp0u3hC71VKJgRemvvRsYaUb4Q2GW0UBxRvwohxMozgFKSRN+75Gs3kKzdRGfyIAlv
      hbNmF8VIGwD1g/txbBs3XEcq2kmxcSPZ+DqEplHyRHnUeo21hdOcD24nPH6Kdcn3mYh2sbfw
      FnXlIQ4kE2CXCegupi7wmYIUEbpXPT4XSixdMmacPhUnlcxwzFjDKSvGFk9yxeZ6I5BAvdfh
      rN5CKdyEjNYjDPPW3EwIHKWzJ6yIGvBBzqAgBY2Gy5BtUFIaA5Xfn9BrmZ269hiiaQjTi9B0
      VLnII93fY0fyHYZKPsr+BEI3Vk4FUkqxtud57nJPUChLXku3UA418GzzH+NKENG62bbjNZtZ
      f+k3nK1bi/CHFvQjo/X8tvJVtLo2EIJydgRZqaCExrOj7fx5xwlC5Kn1u4wUTV7rBscMcnrT
      Fy+LMdGyE8QKI/TrdTxROkGd/+PXh0xN0RZQ3FUY4sOx4wzVfuaW3q/Wo2jzK84Udcamix/0
      2QZDtuJj9gdeN7Qlssi0iT5UIIoKzq2iSrpQLs6q3EpK7h34BXsjowwVTcqpJMoYhKbOlWOA
      0NQFvug/gN8UnJz0UA7UIsb7cFu7qhyoJCqfRgvXoOJNnN34NIiFK49yHeInnuPu8Cgnyncw
      2rIbu+UOTpdW8cmhn7B7TS8eQ2dTvQIlqAvZbKzROTlpMTR0mEzs8dm+hG6gB0I8OHKEzTXz
      c4Y/XiawJRQcgSM07imf4FfqCRC3TgofKZgUXQ1jEbmvhOf3ZmHkJuga38f52nuwo0031Iej
      edAC0QWfqUvHMKIJ5DQD+Ce6ech7GgRI6XKfe4QTboQJsXZlGEDlkjyZ+Q0yAM+e99FcY4BV
      pEYmSU47MszRC3QVjnIq/BUAgvlhLCeGq3mInXyOsh7Cbuqi4go2eUa51zfKd06niQU0cj3d
      5MwkhTWQtxQVF9JFRbKguHsVbKuvkJ7q4a1FqXB27Sp+WvgS64f38cnACC0BueT4P0q8kwpz
      ML6b7IbdGCff/EhCoLvLGo2ej3/u86FKeR4f+BE7Y1n+cUrnbPSpG+pHSyxkHCUlbqUCjgvZ
      KbRIAiGd2UjctrBD2MjyriV44NT/uwIMkEvy1OiP2BAv8Hafh4m6rRwLruW+3h9zKbwVlZ2C
      cJzd6ZeJGhVOTru2NSvPmu7nGY90EVIFnghfIFO4yD9v/BNe7Z6kTk7xePgkhl1mfyDBh749
      9BYkfjdPOV8gXXcHnrDG+MQRPNh80PHVy1QgIQSydQOrp16h1isZKVY9hD2VIAndYl3IQf+I
      jSAP1OQ4m+ylWOhCfkQ6iItg6DbQ9Y30MMoqEXHSPJh9g83hLFMlwaWaO1fuJtLBjNYgCklk
      opl17/01D9VN4gnONQmY8C3rOepj8uYZQI73kyxp/GLEQ19iJ7gGTZnTJESOByPvcWbqDL/y
      /gkfRh7g8+VnMXsO0eArMxrqRBZyyFI/a+OTuBIiZgm8QU7E9qJFEnRkjnJn/h0uluNwz8NM
      LioXUlGSQxN1eLKjYHqXHJ8wTF5f+zX6L73CaW8n3miMcrQZPH5ifQd4PPcOd4RKN/sYrhm6
      gD+Jn+fvev1cSGy5TeLRby2UdDHO7efh4ltsS1j4DZBh2Fdo4d2aR+biwa4Cd/ACoqYRbVq1
      WQzZe4p1fS/Q6i1w3GpiS/5NWsNJmgLudIuq38hrQINR/Vv89ckpdTOFsZSUUCkhJ4doLPXg
      0xXe0bN0eNLsXaMoWIof5fYwGe7kC8Vf4RRyhAMGP279Dxg9h9mZfIXaoKQ1BinbxzM8jh6J
      QcVCJlr55uB/JuxVfN/6NHbrHaCbxEcOs905RVxleFttZ6pmIyredEPJ5GKsh88P/Zy7Qsvn
      nK4kyk41N7jPDvDMHf/+1oRC32ZoOfc8X/e+T8gjsCW8n63lw+h9JJvvuq7kGFXMgT90+TX5
      FJGxU9xdOsiO0BiaUPiMxYGpC/NGBNXqITfNAAsGaJUwMiM8PvUz1kcLHOoX3NOhSJc1lFJ4
      DUFtUHEgleCA/z5SgRYcYaJf+IA/a/yAd4fDHMi38NXGC2R8Dbzt2c1/8P0aqaA/reG4it5y
      mE+15tCnlbqSrfhh7j7G1j5yw+Nef+45vilWrkrBlaAUvDWqE/AbvBLeS7Ft+y31A3ycUEoR
      u7SPb6pXqAsoporwjPcxxlrvnY0Lu+a+HBv9/PvITfcv+Lz14ks8yXs0+S2qBL6UXrkwGWk+
      VlQDFl4/TryFV4xP8JvRDg5EHuLHF5rpzftJBATnCjEOp2Ic9O7Cqyx0oRDROsyWTo6WWhgK
      byDcsYbVNYrVxjhlW5GvgKkL2mOSrnr4dHsOXQNnWoEuO4KKujkGHop1MWp9VMqIYmPU4UXv
      LuqLw+ijt0d06q2A6DnKZ8qvUxdQpErwA+1xxlp3XzfxQ1WVdVffNfu3zE7R8s5/5Sv6W9PE
      D0sTP7PJPlJByV1IKzf91pVS1ZIV/jBCCITpxVp3HxfVHu4690Me7xqhr+Dn/5LfQHWtrRYt
      WlQj0mrayFtsROZSIF2+f2mYjf4JZGsHz5zt5P5wP/uHfPzR1hxjWShUFJfSJve1u/SmNKbq
      Om+KkwsN6/nH4iP8mfUi5kewKfbqiub0RXo3PoWovb5Ekd8nhEoT1PtsMmV4frKJ3LatN5QP
      rHJTiHAC4a/uZOXkEMYbP+KJLVnCnqtbEgqugU+TVJSGQOEogSGq190UA9T1vcOuygHazTTv
      qS0cC+/BsPPYjV0IITjR9BgD2T4mGu9A+OfigJacpJIgXbRwnOTGx9hneEDTGbn7m/ysUoI2
      m/8jOYwMeBARD3TE2V9IoTY2oOk370kt+mrJ5yC+8vkpC2BL0ISiU00woAk+UuPkXHLdrb+V
      a7OmcI5YDF4bjXBu+x9dtxd3Fr5pZ+l0nRuVncKI1VCwsks0vlzdcZVGSQoieuWyhLWbYgDl
      uuyoSaMJ+Jw6zvapE3QkNJ7p38X5VU/iRJuZjDZf/rznF/EEVHocfbSbyMQpUrueJpHp5qnc
      bxhxYwx6VnHOuwG3eQPKF4TkCMQaquEDvuCKvcuCK+i3vMR91tUbXydmCkApYKqi8VKmkYub
      Pw81H3ERrI/I96WUor7nbXZHxhnKKvaF7rtx4qcazgDV0Hoyk4i6NizjAcx8P+DOb8lSalBA
      d9CQlxH/kXzdzTFASkRxXPAYVcm+urb6+ZcCB/nuaAupxu0L2ivHRoz18Nn8rznuu5OeVY8i
      ynl2d/+QDfEyeovLT6YuUTfxIS2NkjVmiqlimrP+Xej5KR4f+wc6vUm+N/QUdSrJlvJRThfr
      aIzpWMLL8fpP4QZrbmguWnMnvdnVbOPszTySyzBD/EMFwQd2I5+PDfCwO8SAXaCyone6jWAV
      aZs6RmMLvDUewdm8/ep1fUp58PhmK2PL5AgiXDNL/NGBgzRZAwRVkcbMMBsDKYLRxevn0uqQ
      V3MX/D2WgwOV1Rxp/syNM4BSiu3iHKYxP7ygWpnt3dEIrdoRvG6R0ZY9s9douUk2T71FQUDI
      W63LKRGcc1u4P3CBw8VGrIpDrc/GY1b7PVjpwG1p5IFLP2RnPMlzU2vwDnzAE6tHaawTDF9Q
      7PUVCfsgNJLjnTX/qlrO+TohNI2T4S08WTgzW1xpJaCUojsrOJFUBEI5/rt1L2Nr7sWJ1N0G
      wQi3BqH8MB3+PANZOFL3yWuS/ntP/zdOxneTWbMXVcqBqjKFML0o2+L+3BvcHbu2ep9Xw8V8
      gJPhLdzR+5ub2DtKl4ZSL/O5rmAJftWXoCuc5YuNvfhGTvPIhf9CcOQETYf+HpVL8UTdIAm9
      xMnwLlQpz4PnvkvRiKBrELEm0AZOETZsTo8bHEuFORrajSjl2aQPYLtwxm5kZ3gUnyERQtKR
      gH2pWn4x0kEumUaVCzc8Jc3j52ThxpfqpSBEtQpdKtjCyFSBwNh5HF/kIwmB+FhgW9w78Tu2
      1VY4VYiSbtp21UtCg0eYkgEaSSIKKcTAGUxNoUUS6JkxIhffZdxsWJHhFW2BoWz+t9CzfKFp
      4MYZQM9NsD46R2xKCV4obmFduEhzxEUieTA6wN7EJFvHXuXh+ADrs4cZLxm0xcEVOsIXJBlq
      539tOYTPFGxpcNkTG+WksQmPAb9s/zNK9etJJM/QEFboGviVRSTkIR6s1v7snZDst9ZhWmk+
      2ZLjzt6fo1znhuaUnxwnTIGVjJMUQrA2orjXO0qwqZVgwHNDK9TvC5Thwa9KKAWX6ndfU6j3
      lsJh/kXLAF/1vUfjxFFU83oiw0fwDhwnfvEtco13MKI1kLFufs0MmIpdzfbs3zf8JiLJC+hi
      jlA+mEpwKbSZ5kA1614TgtUJgULx6fYU62IV2o0pRt0IQY+irtAPQnC8/fP80HqYigsgKOtB
      xksmb9mbZ72kHrd6BphA4UkNki9YWI4ANHRp84D1DuWpSSxH8YlwP7V9+25oTiEPtATUwuNl
      bgKuVHRnqr9vjrrc65+gJ7Z5Vq/9HxHt555lYyAFuFja1eeppEuDW63SLRWU9CCxzCW8qoI3
      P8bdvn7+LPUdyv4EP+URHPcqHV4nbpgB0ms+wfe1r1KwNKTUGDcaENLhQtLDWFYwmZ85HmLu
      7K6N4SxxvYwmBHdZhwAQpoex9r28nVvF8z0RTkZ2s0s7TUu5dzZvc2b7LoRgV2ORlFmL16gy
      2VMbHR5cL7i/UyMRVGRKEnnmffTDL+BJD17XnBKiQKoC3+mtZTi/cINVLJWwKhVsx6Fi2ziu
      i+O6VGybsmVRqVRwHBfHcSkUi0gppyMQFa8OCVIWtHny1JWGb3iF+n1A3BohWVQgFA2V4au2
      96UHWe3PA4rBkp+SNPmW/XOU0PmS9iZ3BCZJeG2+XH6W1aULvDK0snnUN5URZgXrKA718zv9
      AXoa92JHm5kYz+AtJVkdczH0avzFTDUGvymp9dkIBBeLYXoTdwNVwh6QdYw17YRChk9pB7mz
      vsS5pJd8dBWWMhkYSCEci63xHDGzTNCcltICEIqQr5r1b2iCbK7ManeAhvxFBuPbuNZKWOlg
      EwftFsrlCrUqR5t/jlBLZQu7UsF1XEqlEpZVmSV61PT/HQerUsF1JV6PB21a1WkJwC/tzbSK
      FPWVCc54OpGhG7NWrSSUbaFS49WfpRx4/Dd9kN1oeD0XPjzOphqLgJPlVHTXsmeeicw4T0/+
      DY3+qqDLOgbdtLFDu0CeAB8U26BcoD1oETRcBu0IQd2hLbBywYvXzQCqUp6dkBCCscQ2rEjz
      rK63PX+Qzf5xKg70531EPC6GNnNcqZqtzhAkz6FUDSpaj8xMIGqaUJ4A4cIgez1n8RiC/oKf
      sfhmXE+AHZMvU2NYxANqjvgXQQBeQ9DVoGO7MDhuURrux+P1UAlffRMldIOaXD+1Pjhm17FD
      G8Q7vVc1DB3TY+Lz+jBNE7/Ph8fjwef1YnpMDEPH7/Ph9XrRDR3DqD6jXw0FkI7DcE0XFQn1
      TpLz/rVY15IAcovyd5RSqL7TyHMHaD31ItbEMKt738FIj1KsaV82svZaIDxe7GgTkUwvZjlL
      ZnySXOMdSzpAtalBtltHiXmrek3EcDihVmOVbR4OXWRncAThOkS9015bu8h4xmZ1bOX0IP3x
      P/2P3864y3toZ6EUyirC0Hn8hXHscD1YxQXRjEIIBsNdHJiMct5pYMi/hjd6faw1xwj7YGY1
      UCiCpmSzfZr+lCJrm4hwHCE0fNlhdunnMXRF3Jnkw1wDhGsZ1+pwJgbRpUMiICnZkC4KAh44
      MqwzmPPQEpGzDJYICs6Pu3y2M095sIdR/yrUosyhy6YIxPoPsiV/nM2eFPmSTb2v+vA1TUPX
      tGoita5X/9Y1NE1UVx5dr/6uVX8XQtCXg4mS4kCpjlDQz9noVs5pLRQTa6oJ2lfDChO/qpSR
      Y32QnUQ7/iZ3Fc5QH9DZZYzTFSizUY5QnhhhvPX6ojQvQ7iGi3X3cjp2L9lwG4FUP4HSJFaw
      bkEzGYiyfmo/db7qCiAV7NO2U+eMsdqTApglfgBbmDSHFT595fznxu5jf89dE6Y2wukAACAA
      SURBVH38bsPTlOvXVJ/59OSV61YLWebTbOv/FX0TLm0JQYss8mK+Dd+R55FbHkIvpig3bqyG
      I1tFvqU/T8f0Cq+61PSLrK4A82V30APbR94mH3yQvLYBz8gZinqIlKXRaLqMWj5cX5XA8vUb
      OWJE+XBiiIZj7+Pze5FWmZT0sz5a4qjYSHjyfTbVVqWDEPDIBp1jQwo/Ze7s/wUf1vzFlV+s
      bfGEe5iMGeTdTITNMgc3Eai5KgyWUjweHCdgjDOSOsLfGg/ixlbGpHe9UCfexnvhADFTst5b
      YktCEtRtRouKjKW4WPRyunMTxqVDOI3rFhQWvm5oOiIQRgTCKFlka+/P+TCbphRpgdo2hKah
      FVKEtblShUKAlS+xxehfssuwbmNJfXEgwU1B/7+/ct+3mypjtA0foin9DjI9Siq+ARybmn1/
      S2TkCI9WXqXDl+b+5jTb4mnqPQUGe8ZZ65lgnbrE10L7ccaHGbTDqFgTmWyReGkYRyoCi4KV
      xgsaKdtDxOOyr0djn7GTQt0G8AZ58OL3MZN9PJ/dyFResSOeZvJiD5NOCBGJI0JxtGCEb3pf
      ZUMow/7JGgpbHmfM34FWyjKYN1kdyBI0q2VQPIbAY8CZEZc0EbL1m6+8H9A0Lk2UaXPHONGw
      lz2VU9TeRCK9EIJan8LUoGArnjH2kNr06A33d6NQVonAxQOYJ96gy1did8xiR40kYkpsKbEk
      dMUhVXbp4jyb3XP0jltUzFC1VOXVfBaVMmv7XyLlb17y+doYDHja+V8qP+VTHKBm5CgDWhOW
      7md8aJxtoSm06XKO+9hKh92LBxuPvpDQdaHwapeHNNwM9L/60qe+rZVSWK4i1qixu2YCNd7L
      ZM8AX2o8xwMtGWoCUBtwZ4//1DXYHkuyLlZilT+HELDWl+JeeYTSxDiDbi1nxRoOsYH7vNXi
      r0opjmcTvOrs4EiujmzeptYoMmkHyDoe4v37eaRhlM5omWPeuwhkBtjVVGBtzOHQhQKP8D7d
      4e1gepEXDrOjyabdl+GofyemU0LFmnCEweREjo5AFt90xk/II+ieUJxWa9Bau67IAEIIyvVr
      OdewG2V42DR5gFqfuKEHPv8AuLwNP9A/weiGT3/kJ9TI5Ahq36+oTAzxx40TNPokF3PVszQ9
      miJrV82/Ph0GHMG9awUNIUmrM8SnOEjT5FF6tTYc//JLoXeimycLz3NKrEWGEoipQdzMJFo4
      jqpYxIaPUPHFCORHWRfI0uwr0ZE8TCqZp3/1o8RTF2jylpAKPjS2cEqs5Vw2wJlMkC5/EuOa
      t6hLnxR0Jeh/9aWHvq2VUhQcgYrpRPyC1b40e+KjuFIQ9CoM7Wp28apur2vQ5Rtnt/8i241L
      HBnzMiQTvDeZ4HXjfgacGFsz+9gaGOUFuYdzm56mZEahfhXlunVc6J4gUzEZatiFaers9PVg
      aILerIcHGyY5nKtHZZN8PXYUU4dDEyEG63fh+KJI6eJGGsmUFCODU9xRW0bTQAgNQ4PzUzp2
      U9dsTchlZyIEnsFTbB95nR2BNN7rLC1nOYqeLARMQX/J4G19A8/WfJrs6ms8FG4FoVwX+eHv
      iE9eoMbN4sMhU4FttdCXA1Ov5gs3B6tRqk5AoyZUHWPMDz4DGr0luvJHOGk14YSqOrySLoEz
      b7Aqf4aMvxk7XM/R4C50TdB8/gV2TvyOvkAXe8d+S+f4Pr4UPERb5iRbQsnZHOyID7b6x8hm
      SnjcMu2+PJqohlHkCPLHsfeZUlHsikO9b+moKaWgLHXMq9Ln8tD/6ksPfVuUUhQdIGZMb1ar
      hOBfVlgu9yLn4m2fHW6hp24P4413kzETaKPdZDJlQtYUdzWWaXBGKOcKpBq2QTGLcmzuz79K
      mALFbJHPR44RMl00IeiKFunPmhz3bqNr4EV2NFYQQnDcbmek6d5q5WmPj52jz7JbHeFMpYmR
      kpdNsSKgqAkKNkULHHn3GK5dQTSuWf6JKMmq8y/hS/YRNV1iVzoafglIBc/YWzga2sI7a/6Q
      keYduOHa6+pjpSDPHUCL1WNMDrDJm2NtVLAloQgY0BSAibJgXbQqvnQBE3kIhQXGPI1HIAga
      ku2VE0yOZ5iMrUfoBv5yim/pLzA6UWAysZnI1Hm+nv0JD0QGCJsOG4vH2RZOsiZQJeyE9/IC
      BELAGn2MZk9+Vsofq7TSHd7GLvcYmUyRBp+1bMx/1vVgaGo2tv9GMHtQqBAzW9QZ4r5Sp0v9
      b+ba6mb3ycYBtmd/jD2gUet38TbDD47F2NhWJuyDO30Ftqt9DA7uJ+FX5MqCWCucn9KIV3I0
      +K3Z8379pqIzJokWJtlQU5k1qT4QusCJ1CBOvBWlJFE3RVHzk9z2eQqZYRz3p9O+CKgNCb51
      l0Xv1Ju8dMJAbb5/SZu3KOXZZJ3HH5S0hhRVX+G1S+7n5CYm7v4yiI+/FrW+8V44+z6dIsWd
      tVDvn3tvHh3K7jyzhIA2n0LKhbZXhUIgCJmSL+sH+N5AHRMdnyDuJvlNeStnVz1BXf8+viZf
      pMZfNUDUBKAmcG1E6ZnHbBUHzgW30WT1Y5iwKuJwMW3SGLSWVEM9wsWn3ZxJdNZDMf8wouuF
      VFCWBhoKn14dkNeENQlgXsrHY6vSHB/W2DxtAhcC2qZDWgOe6ig21irq8v3T5szqyxDTmfxf
      016hrk7iuFB2YNwKYocDVV+Y0Hit6etg+tB8AWLp01QkCE3MlgpvigpcKWg69SpDQ+fh4W9e
      HpbgWATCQbYEMlwP4SulSNuC0w33rpyJ4iZRe34f63pfoS7g4BVQsRw0XcMq2ximhomO40iM
      afHbV4L1pmAwq5F0AmyN5xc8AkODNjnMBJDx1LK7/D7npvrYXjpMTfRyQpxhnqthOAtBj+BA
      roFk5zqeHP5rNA/UBSR1geXzM/z6zfsD5kSg4iqDnTaNznwpRUVq5FyTpOMj7xooBHlnfvDT
      QpZaVw9bmxYnMMx8Tzs79CqhLuUFSgQFPxtew/5+k+e6Q/wi+lVEeM6jKsI1CF8Af7qfL4pX
      ETpM2holF356WHFsWOI14Om7NbabA+ipy1310h+l4uqzj+ZqQsGVipQFRVfwnLwDq3b5ys/K
      dVFnD1bNy0w7pOwK/iNvoDKTV7nT9UEpRenSCTZpU6hKCVUukM+XyOdK1XCNfBnXBdtyZ997
      xBBYNrSGJb1ODf+t8gTH0lGy0zTYVwxwPLqHpp43sMsWqwN5/pP4MfdFh+boYt4XsORni5Gz
      dX5yoYb3jbv4zODfsOYay9Rcqc9rxZyPWiyn2Myc1rgYAheBR7hIIbDQybnmouSDhUSsCehq
      XJiyJtAWqF5zTDjDcJLDwwYdcUWNrxpX9HJhI8LQ0eLtS06qMX+een8FV2nEDYlyFRmzhl8F
      HuDuvl+zrVlxXutA1i9BrJqGqxmI6UT7K21clVJczEK3HaW3+R6GO/ZeUfqLY2+x5cgr9GSn
      kPk09UMXqNFgXSHJq9kJph748rLXXi9UeoLOch+DXi93Ngq8elW90YRAAZdygomKwVrP3HNv
      9iuK06FbT9b28+t8Db/e+J/Q0qPEc72kI408PPVbdgcHSJa0aUvb9WkOS60KXQmXrsQUFfeF
      q+ZkL0XwV15pLlfpZwx0QlxDSqRYIKXnn+UFfuGSdwwqSsNAEjLsBRGii2985Xss/bkCNtZJ
      fjnQRKOWhoCX9b4JLrQ9tjCt0qnQ2vMyeU+CmDVEUQePKfBqoAR0eLMM1rXTPbmBzFA/xTse
      XTISUOgGrzY8wabkj/EbAnOZCgZSwQ+z6+lt3Q2RWlQofsU5KlkVDN2rt1F7Zj97rSwz6cca
      8Ni59/hl2wbKa7Ze5WldG+RwN9vjDiUH/OaMN7vqhR8p6TxT/xTOhj1cOP86/6b0OwAKNiCq
      wsjQBErTwCohwwmS8Sbu7H6GPaEBABKBuSDH68FMJMBSb91zgykSV9JcMukCIKqOU9edzs/Q
      kFKCULPq8aIQ4IVSeCETqHnf1XQzTalqqLIml+jj8uEu4EbmP8g5K1K1VZVo/CY8vWaQd1PN
      hITkyc4RLuV+zq8nP0e+tguA9qG3+aP4QUq2S38egh6dpKPhKkVAh/s7HC6e+BUj6x4jVcyg
      1S1fjaHU2MX+gVqcbIonVy0dkPP2uMmlzY8gaq6tqKvQdNxEM96B8+y1MvhhdpOvkGQ1HWuF
      jq+UyVHu6H+D2rhiKcWqT6/D2bAHpKR28DCqpipLNAHW9AKuULS5w5wY6+NTk7/ig9BeTtn1
      PGqCz5xrc72Yu+b6A52Wu9+VxqFpGgooFcvour7APyOVZM6CKuYT5gyBV8OZFXKaGGeOGpob
      uKFJ/Lozu/mdP6ylpP/S3Lq47ULdbjIPQxmNd2KfxieLIBR+Cnxm6mfIqZFqm8Aqnpvo4Dv5
      x/mFdR9v9egkDBu/7qBQBDyCf905gO/Ey4hVm5d9YDOjPFKI0RWXS6uFSlXNxtcSzzMP+qoN
      JHc+ysRsNWiFUjDoj/HW7i+i2jdcV39LQUmX1RdfZ08wRdFW1fPA5u4GgGUEQUFL3z4+G5+Y
      XUiDpiA9r0Bepy9NuzvIodpP8cfGi/xl+OVZtWclsBI6/NUQingJR7zE4gHCES+RqI/w9Hc0
      FpivAi0ciFpEkLOl5JZps/wytNisNvNGqgwnFUgllnC2VYnj+BB86N1Jf8sD6MUkuYJNxq/x
      jPYZInYv2wZ+w/H4n1BQXo4E70G0b0IpxRuXGlCX/pmHOl1OjRtICVsaHFqtXi6M9KA3Lb9Z
      FZqG2bmFTuvSkrNypKLGr8ENHGyhV8p8eM8f4Bx5hahV4vj6u+nb8SgycvPh0SqfRh5+lXDm
      LFM+QZ0f1k2H8ygUKDhZiXHYSdBx8nmeKr2H0BW2C7peLRxsK42KJfF4Neq8ZZ62X+V0sYZw
      SGKuaBbn4goOCylr4Wc3zyjLXW8sJNwrbPhQCFzUEpabpTE3eFcJXMW0iiSYf5+ca2IIicHl
      Ji3bVcRDGn2JPWihGDIU41joaXqSF8jGVlHw1TFYuwqhaQQqaYrTFhghBGrNnZyzh9iYPciq
      qMP3zzVzJpXD8Qu0eP0Vxl1Fqn4z+8+/zx7/xMLnoBRFR/Fy7SM3dMi16thEGnhj833VQxyC
      K5PgoUp5nLd/wVe956ivqVqmmgLMOphsV/BqoZ5ju/4NvPb33Jntxhd0KbgOmqbhOFX9WKvA
      pM9Ps7ea5uozFXdFVyYZfdGI5/223CZWLWq58tDmNiQLByCW+GzGATXTYjmGcZUg45hUpIZU
      gqxr4CgNZ4nTCEO6g0+7PLxVKXir18vfeL+BNu90GQIRMs13smfwZ7TY01GDk/2gaaybeAcx
      ehHvuXcwSmlGOh/lu9aTHCw0883OEUZbd9MT3wHaNazj/hAHozupLBF5+1x5LZU1O6/exxUg
      dOOqxK+kxB3pWaC3zochoGHqIs2ZPtQL3+fT4iJdEUGdb3oTO+8dDVsGhzZ+Bdsfob2jjS11
      Gv6Ah2DIj89n4g/6MIIhdI8Hv78q6kvSwP4IDtFbuMcUzDkfZ/agtw6GQENTBgK5gNXmzJ9i
      ieXjym4zjeqmOOOaCCCk2Yv2CHNqUdVRe3lfE3nYF30UrWX9Zf8TQvDeqqcRwSiikKZj7H0q
      wQRfD++nbL+HG4Hekff4eeRraF338Ka7g3dSQ8SGj0BsffV83mvAeOtOXnj/PT5bn14gDOrM
      Cmc/isT2Sgk51r+suqYLKJ49hBjrYTejbDLKFPMa0pWUbS+TToWgKQiGfEwQxo43IxQMR1ah
      ymJ6dRCAjpQaJceDjAni017citJwlcDUbm0Foyo1SObcUnM+BC4T0GKeGn3z0KpauYNQGsx8
      z7vhfEaYG7C8jCnm/20pfdYzHNErS2yQYbE1aTGfH3HWQte9S49aiNlYdRWI0rPxi0x6W6i4
      Ep9HEfTC5lienanXUGN9IF1k7SqSWz6L5zpsbcIwOb3mCfrLHsaKkrJTnfdAeO0193EzEL4g
      +poty/5fKqjfvgcNia5BkgB+vxe/30tTEKakbzqBRzAcaJ3N2qvoXpxFMsdSOmOWTSDmJe14
      UQoiemXJVXvlMTOYmRxyhVokZOdcaStbTFJTaGhUi6m7SiNbWjr2RS3gysUDXzhIU0giukXc
      sBaZRpmONbkyKi4cD+66pgkIIUBoqOzEwi2VgM8kevhG7u8gl4T0KAhBRfNxPVUfCk0b+UH8
      D/lB+7c4kfOStTVGwstvoFca2qLNsX3mQLVOPmAr6A60YOkemqMmHTEN0xR4fTpS10iENMIR
      PwDr7QE8w+dQxRxuZorunIYrq0x0NmfwTrkeK6ARMCS21HHR0IQiaqx8qUixxNflHuP5gvfW
      7QKMX3q2U6zpgswEtWfPUtZsvnyPTskWWA7Eg9dv7y0VSni9XgrFCrqmoWka7rQTQkqFpgkC
      wRkLyuV9J0sa+UTbNZWsUFYJpEulZQsT47+jNTbTa9XR4bgKdB3ljyCkZPXg6/Tpj1xzVWYh
      BLJtE0Xgdw1P8lL3EcqdDbdUL10OSspqAN+8kzWFEKQjLZSd8dmw4PGyoGBDXQBmnu9GM81n
      Lv0D/9TwOVxvhGcCD7HGmWSyaRuFta0ITdBw9nlaK6eJ+Cro05J2BYvkzc1jCa1idj6LVO75
      G+RbYTI1iuvuZeaAjIFKmQ1H/olj589QKkkGi/D5e/XZiMq5Aczw5dID0nUd15HYFRszGMCu
      2DhSoesG0nXQlEBhLHoAc335DYWwy8A1WEgMEzQfdf3v0hS5fDwxn0JkxiFaj8xOcV+oh3Lv
      m4wnvn7dQWvljh3QseOjJX41LRGVwjn1Psamy/MKtEgtziSApOzC61MB1vuKNIQNbCkxtern
      +4s16Gu2InQD1dhB9sIH7N7/MwIanAnE+MrWiSVNnVJVyXKlY/xmiPvK+82lcT1tr4QFQlZ4
      fJzd9Q1eDz7EkXEDaWkcOTcv/GGBbUhb1vbv8xt4/RrxRBCfT8Mb8hOM+AmHdaIxH+HIlTeh
      IY/kU+PP4J84f9UJCN0ApWgvnEZfwpdg2ZKnMj9H6znMjr6fsTYh+WTwHGr00lX7vh0g0mOI
      8QGajr2IKdSSJUa8q7qI+6oHQfza3MnZh/4SaXioSB1dKMou/L21maE9f1RlKCmJv/9ras+9
      z3qKNMsSKuxf1s4vlUbO/WiOclqKppZymK3UanBZWRQhBFbDGqzkGJNTKYZSkqaoIH6Z03PG
      knP1gehCXRYjJKiWNqwG0C3cJ2gC2gMFxnMwFr+a1xZQipHoHfgnL9LqW3jWV9SvaIpIuiqn
      2VGXRYiq9WNkcJJ03eZbd0r7TUJJCVaRyr7n6Eieoyl5kZHWO1GByGVMoAJRzgTXc8LsYGD9
      wyirhCc1yE5f1cvrKnit7mFwHKTpBdNLPp0itf0RtFMHMJREygJrmpZeFHVRfdPVuJkrBPst
      8XUlfPwZE8tUhhNC4Gy6H6+hYwVq6O5fHMI8gxvjwpmJu4gr9tBQ7mN93z8THzywbNFbpRQq
      lwIpOeisW/zf2d8aI3OfxQKw3TeASo3d0Pg/CghNQ5VLKN0gNnGRnUaKf3fuh3jSS4/ZrVtF
      snkb6oMXCR/8HX2Nd8/G9bgK7FKR4EQ3+MN4h7v56vHnSfQcowuHoC3xu87suWsLxjH9rmaE
      lGAx4QrEdIjMUmHPy+n58z+/Fma5VVh2nylqW7HX7cIu5jk4ZnDsvEvFgfk22oXL0NUnsHgz
      4yhxxYyePQ0pvhp+jz/z/4ZvjP5nzMwSpfaUxPnwRWQ+TQk/c0S/HGtNx8PYCmdi6Kpj/jgh
      QlH01ZsZsnV8GrzmW0elbukQcAAxcJbdx98ims+Qr1/PiUqMkis4mzOpRBrJbn8CoWnUXDpK
      xnW56+jLTDgKP+DLSnLW9Qi0+WEKVdOlmFaLF5rML1/5l+trqRXkxpjj8vaW1JY8l3l5Q4sQ
      ODsew25ah2EYnOyHk31VKbCU/jUjGea8epdj8XU+TV6m/ix5jVB0Rkp8Lf23rOp/ZVFtTYFI
      tKBFE+zg1OxVV4Zk12rYXXy7ei7ZbQqhG4hAhBGCDFV0OgsDBMe6l22vSUm9koyaXmp++10m
      0hb/pO/iN7v/d/S2OYeiMnS6ArAxBK0BwTlTJ3SHh4tZjdPjCyXzfMwXetNlEGa/F3pvF3py
      F/5c/LkgZymkWuwNXth2+ZCdqzOIIwUl18RedJiiVOLKpRGFEIhwHPpOkfTXsSmepyF2pZtd
      v832SoNfzDBxr8M2s5e24XdYN/UuY0WTcqwd0ynxYOpZHoz3X6bD2lIglXb5HkRAwluheP44
      6YLCjTfdVjX7lWMTeem77Bj+gFTTBmLlNKu0Ila5zGjb0ierO0KQPvshZapv4dID3yIZakH4
      Q1BIoyeHUeU8baNvY7sl4nbVslNpNdm62aQxrjGR//+pe68oya7sTO8757rwkRmRkT4rK8tl
      +Sp42402aLZTOzbJHpIamiFFaZaW9KalFy09SU+zJM1IS6MRNTRNikM2RdNNtCXQBkCjG65Q
      hfJZJqvS+8yIDHvdOXq4EZG2gGoUXP9YhYyMjLj33HvPPmebf++t6YpFhYe3YuPZbk1a2hmp
      3fpzuzoUve8FMFkUjBcFDdtisiKIaU3c2k1IWt8WW0Ri47hv7TAPtcSUETth8zzwlHz7hBjZ
      2YNx31PUAwObZ6j7rUG2Lu/OgTGxa2h7dyi90+e8XWXS6Kjefj4AAl4t11gFuvx5Ppqd2NWA
      qysTAVhSoTWshxYSSJs++RT86pEK15d+wN/N5wgGj7/d7XhfoKolhs5+iyF/lpTyER3dPN9/
      mNTY3/Gx8iXmx15gfvSjO74nM3n2FNIUDIPZ7CC9P/i/GX/4Sxwsn+VX1MsEWnJ1xaQ/W6NE
      wPklHzPjcHhI02gEaKXpSknGlzSDaUUs3loQWvu7AVvYvNASgN1dmVsn6XQRVuogLQmWZN+g
      wd5m1Q3X1/z0gqLD1IwWBFNlqDYEDw+J9tPfOo+2zsHIBlHstgBbTS2jFprYmyLJNWXdRYsk
      IchNvMTcA7/Dt55PcrijwpdO3UkN2n7xYtt72+nU0XFCZeBrQVVZdFkNtuNOu0SmNgO1Esuy
      i7rfSqzf9hnTpx4a7daYKSNAbLqRDWVysBDy+dm/4dngi9T23l0E+r2FoLB8nU92eiz4Js/u
      OU5i9ioukS0wMHmGuYNPtqta6IkrFG6fo3flNv3uGkNGiGxMgwmXxv6ap05t3L/+hA8IqgnB
      JSfOvp6AWMyiUXcxDIO4CW+WQmIEDMYNNj9HAL2pWMFWe2vjMzsDV5GhPLmuOHbQIZ3YqdbY
      FnzifpupJcW1kuLoXpOVdc1Cxac7BVuF6U78tDtDa7FlgW3lrr9tsFWYFitHPodeW6D21B9w
      edHklVu7fG6Hrra7gESnjP6J5sfqyiDUkZHibVLHdqZZb/1vr5rEXrxO2DXMYu3OshyTIbI5
      HkPoLTcibgQIoTnRH2Kuz7/d7XhfIJw4JacTV4FHtArvW7jIQ1bUbeO+cJ5Hf/y/k1AefVef
      p/vlb3Li5qvcX19iUPnoIESHGh1q4ipEKYFSW22zeMLGiZnk8ymSSZPOXJJMNoYTt+hJmkgn
      hlKwu469WRmRd/jM5k9Hz9R0NhKBtvN8WhgqSO47YOLY0N8lWFESpVpn2KDpbA+i3mn1b89L
      oXFE5HBxm1SPrOndXZO8YOAYYm0emeuheuwzlIrfjkhzYmM72Rre3v1mbNfVNBIhNHEjoB6a
      ZMyo+Kktd5LtdsP9PXVuVGe5uhTDNreec8v3xVtbJ1rD/Lr8hTO83iuo2XEK9QX+OX+Kc3s+
      irE2T29lhmUp6LIEOUOxnOgipn1Kl87wyMItKk4cqX3qWqOUwjAMfN8nVCnK5TrxmIXtbKmB
      QMXVXJgIkAKEIYhZUK1rlBTE4nBzBQ4Vtt7X7e7Lzbi9pik1IJ+AgWzrM9Gknykp4nGD9KbC
      fHdDbNvTZzAxHTLSqdmsUu+YH1rQymduPenZVc3ykiKekezpAsOEemAj2OA43V2CmxDIZu6r
      3TvItRsm+cmAvXlJPrVzMNtlczP9eZeDYwrVribha9l8986utBak1Hwh9jIPVM7RlfR3/czb
      Yb0h+ZP6Z+h055Heh8MjZAwd4pXu/xERSyIB5btMTe0lvnaDZT8A02LZhdgP/z8eCOaQhTSd
      niIVi7VzB5TS6FhE3htfkZzcu/VRtwr3HuyJ+FkaTbGqSSUE3RkDFSomfM1SRVFIvbWioLTm
      6rKmo2AxmhaslDU/m/LpTkBVScJQk7M1xfWQRp9BzL57t2bcFtQMyXO3NINJhZIwmttos9YK
      qK43Igp9X1a3VeHisuZEXBG4ivM3JA8ckWRMv62waTTi311c0S0u0N1Ary1w/PKfkgxLzJdN
      vvaAIr6ldN32NUKyOQ3yThNba42rDSQae5fYQNTuPkC+wzJ4biB4dv0wqzqDVZzB6B7EUh63
      4keoZId56uq/48XOL6D2vn1Xw/cT2ncxb7xBNqyxPHgiKuQVS5J77Qf8Z2ef5ZYt6c3ASgNO
      bEpQWwigouFQHEohjBuS3kHJ4b5o5vih5saa4HCfpFprIKXEbXhIKZHSiMiL0uD6EoShJpu0
      OdAlsIytz2+tpnlzUdBTMBgd3JhHNTfyMMXtaIIWq9EiJ2XEMhVSbjQQVxAEAU7MRilF4AeY
      poE0DEC3C3cBVF3F1KTHwc6oSLPWcHVKka4rcrbmZk0ispJETFBdDTkRjxbgdR9uhxJbQRiC
      yAgOD4hfXAAA1NoiD4z/JaV1FxWEPDVc26YCbWCj7s/GLrCbf7n1vkaxXNYc7ZckNlGGKoGB
      UIqE/dbb5nYDSSBYdwXPrB1hNnMMS/tot4YsL7N28isIwyB7/Uf8y9hzvDobp+g7XDv9R5C6
      h8YA7zZaq/raIj0/+QbZWJwnJi60FYJFIViWku64YK8TuXg9DbMh7HHARSPA7gAAIABJREFU
      U+BIzVUliXUKbAPmPMlHjklilsT3Qnw/QIioAYjepEZJKfD9AMuJcW4q4NE9G3NFo7ixCnv2
      2hiSty3+Wy7XQQuCIMA0TYQQ+IGPChWxWAzf99uddYIgivU4jk08sUFXCbRgvaq4Ph0SVgMy
      jZD9MUXMaD37CG6osY3t7twNo9wNFbfuxg26G2RnN2+c+m/Z98q/5/ZCmSeFR7ez1bBpnWjD
      8H27EPnG7wURcvOqJLQFmbxBwhE8M55hevhpHlOv8ancrTt2Gt2uLvkhfHNuhAc7JvlEcIkF
      P8M3+/414kBHpC1W17m/+hL5PHz2YJ3zM3WuTl5CHn3indya9wTad9n7zB9T8BskS6vsU7Ut
      f+/Wmu4wYNI1ELHIBrOAcg1enwtwGopKv81Te2G2oQmRpCyNG2hsUzFRlDRci75OSVdq5yR2
      mrZDzNy5e1e9yIVt3gVVNJmMchPCIKTls45hIWTkEInFrA2XtzKRhtwhVL4WJB1wHOjptWiM
      hc0K3hqanUS1hpgpd0klbXqnFNhSMGrod94pXpgWMruXT629SKAFCXM33nZrZd9t1d7uK95K
      jT3azCK7vhDjb/q/iLc/gYiledn7GO6KxRcLG0zRO/HFtYafTdocM8bZE1csVi1+uj4MB7Ko
      8hrCjiG9CrfzjzC9WsabuUW97pO3zrB65PH3vZz5HWHZzNz3cWI/f4Y960UqLdVBK6RhIICS
      0ixnE7xclsQDBYHGKwUMBgoPEFnJjJQcHBQYUnCppFgvaZZXFV0JyUpDM72gycSMHQ4FpTU/
      vqYZze9cTQ/lNVdueBwcsdvVxO9031qLlrxjVt6dHSjR9Wo8V9PwBYUOQU+npHwqzps3fE76
      TX+ZENRrDZTSBEGIbVvtMbXo10EQYFk2Sof31iVyperz8eo5hpOqKYA7s8nuHMLeefFimzAE
      SvBGI0NS1Xli8UV8LUh7RaqTE4x21XHMt56gWsPScsDheoMZV3KgD9bqkunZMtgxsnNnaXTs
      pVg4zkpyhLKRZX3vY8hYkiB/Z87N+w0hBKqzBzk8Qnb6Op2+204wsi2LUCnGHIfTMYEvBPOB
      oCMl8HxNUcFkzOK+oyYHmxP4ehH29UJXEvIJQdyCdQ9cF5ZFmjcXTIYzPo1A8NPqXp4JHsWu
      l3igUN9U4jwSAMsQdDqa16bgn9WT/LB0mOVSyOFs6R1fbzU08HQrMd9ou64nlxVr1ZCGpxkq
      GBhS4FiCWFKyOheQaWpKSkEQhggZqXOGYeL7QTsbUSmFYRrUa413vgMAiHQnbZtoR2GtO2Fn
      lHDj/VbgLFKZTKn5dGoZ1DLEIbbyGi+m70Nqgz+9dYRT2SVOF9bJmNuTtpvH0YqEF5CwwHMj
      gej0lzhYeo0wvMXcXBGjYwSV7kQ4cdTe00igfpfZYu83lrKDvHjq4/yLn/09KXsj6mfaFv0a
      Vh1B1oSjGUUgJC8me7BmljjQKwkrIS8VJWZDI/KyXd0NovuilGBNCd7s/TVWe7MsXvxLYqrB
      hdGniQVlHusq3rF04evLaV4a+Cpu7yiUVyhO3mauZNCbiSbr1LJipMfCMoFtdaG2I9ACX0uy
      ho8QtCO3XgArZc3p/QZStLhHUZkdrSSOMCPdBk0s5uA41sZp0DihEe0Im1zB8Xj6HgXAc+my
      W2pOUwXZNL+3eHz0ho0gtgjLzlV8I5awoTqFGp5TexFWgt9IzPK6leH57q/RU/4znIzCkQFo
      uD2nCYoBWkMYKPbbijVPsOgm+Z+nHuMx5yrZeIVavovGoa9AprDj/B9mSNPEZ0N31TraLQ0h
      GIpFuq0pDBZFnAtP/SHOz/6erLyF22tgVjXWfIhdUlyehyM9LZezZH8ebqsuVhND4MRZ67uP
      U+oqmfoc+WCFpB3SKmO58Xw0szWbH+3/A8JsL1x7lV81nsUTPrOrgnJVY6QdRkZtJqY9ssKn
      0O67tz2aHMEUmnRz8rcwu6qYK4b0djYj31o1Y1DRWLJJwVivw5KnsYs+e6XClLJpEkeCYhgC
      w7DYOu/UvQlApra0MwtLbKgx0aQXb5FKt3EjdwrC5r+BRGIN7OfB5VfJWwpdKSGnr3BgsMFc
      NcbP1/ezsK75ineRPbGm4JhwJejgu7mPUBt9nNzMK9T8LG/c/1/u7AvwIURs4SaujmLYKpFB
      OAkKq7NEpmT0YKvCII4mg+YfsydZPvoRPn32G4y4y/TffoOZJ7/G1Ot/xQCzHB+WXFwMGHUU
      Z+clF0IRPT+tCTS82v90u4XUyr6P8SPxcYQ0qAD/5+pJPj/3FwzHKnQ0DW0EZC0fa3UK1dGH
      ncszZISkHTCk5vIMHBx0AM3+YYvZBRifd1Fa41iaoa7dt5TNXam01uRTUHEFfbmmYbth86JU
      gJSCo804hx+YXLzgcZ8ON827zefZPM+MexOAnsZW6sAOfX+Xid8ykLQWNOo+qllYV0oT3/ex
      LDPySbsemUwC3TyI0oLVZB+lUgahlviUPUvCq3FrVfLjyTiPc4WHpaJvU2cSXwm+NfRlgr2n
      EMDq3o+yqnfvDPNhQ/zma/z+9DfodCIVpRxAQ0kWSorbhkRrQSaEZ77432AEHrbfoHbgPtTU
      GK8WjnFg5gW+OP4sf9I3yvVHf5drP/tHHp6+irEOFxImBorDed1UazQvrPdR7z/WfmTbs868
      3DDfFH/Enpf+lkOlcdLDJvG4YH+PpFPXmAfc/AjPTNzH5zNn6YyHtPib1yZdRgZM+nssgi4D
      KTVr64qplTpD+chuDEPN9QWF72uUIXEMqAdRycy4jMq6i+a/jWCfQtBsm0q0VBpSM7zf4sKV
      ELwo18FXMJwQJDdd0roP1UDdmxFMaZmHald2cWnuRGvwm9FoeIRKgd74W6Ph4fs+hmFs6HFE
      qRaTrskxb5KccHm15HAucYwZt5dPq5vsT3hkLdW+6QCzDZNzQR4GDt5xDB9W+MIk9sZLzC43
      6E9JHDSODuhyNP2dIX29JlOpJDcPfxpdGMTP96HDgP4X/p7Fj/w60zrGkdUb9C/eYEnbNB79
      Egu5YwzJMYR2SaQlptBYUnBlEWa8BPODjyCkgbk2w6GpH5FbvEQxdFDJzui+xVNUY1nuv/U6
      hfWQ+oJiTEmOmFNcso8i4mnWrG6M6ddZdwWhpyg1BOmU5Motl56ciWlGGkE8JrgxGdDfIah7
      8NOxkOEhm1zOYrDHJJez6Oy0ScZNbs0FHOoT7cAXuhliFSZSyGb8InKZSiGJO5KeQZueYYeO
      PTaFYZtZJPM1zXxNs5IwCQYsrN573AGUNDd8rWL7DtB8k6bOxubVP1J50pnEJtdn69vRFry1
      CFJ0037LexVkJA73Z3z2VM/QHwvQzlY17MyawYt6D8VDTyDy/XdVXuVDBytGd0WzIjWeGxn5
      nucRi8VQwPdjpxk7+RlEIt3+iiwukkjbICRzJz7Jn2Z6ePLsP/DVa9/h+dIs109/nlQ2AdUS
      axMhtxsWt7v6yPuL5PfGyP7kzzmc9Xg8OU/ODgjCkMbaGc4tDTBn92LqgMONMZLHbC4uaOqW
      YE/ewk6GPFL8Hi8nvgbJDmRXH8P968xNVknEBX1dFtmU4Mptj2zSYE9fFOEdHHJ4fdJjZV0T
      CoPxBUjaIYeGTMo1xcyCSz4Ojx+SkeG7w2/SIrrdeVFrBcL2DlgwYKGURkjQOgTxDgNhLbip
      PPVZScLQd6D7vDVtoVyuY0gD0YwiBn6AbVvtC7LszfkEW4MwtoT+WNj27QLUQ8F0TTDbfYzy
      g7/HB5XeopUCrXat4HC3iM3fIiFC/K4EiYTGtAwgCWhekPu4+dBvYSxNEU6vwcDByFXqxDm0
      Os5N3wXLxh0+zg+7R6g8//8wG+/CnL7GlUYPp25OUJNpzp76CLp7D4nr3+eImOHBvKLTDKKV
      uxaiVORqPSHKnHCvkskkESkAyXJDUwoU8QRkEgbdfhEaNbBiTC9Jnhr0ye13aNFh4jGDEwcF
      1yZCanVIxAXdOYMgdLg8VQMNUoUcOBLj4jWXfFIz2iNxLNl2r+9YYN9iM7/TwtxqEtJ6654E
      oJYfZlKlOWKW71jAdcug2FoFWArRVndc18WJOVSrdUBg2yZW29XXqgepdxyv/VML3iwZ3AqS
      jB/47L1c1ruA5ri8BmptAZntQsSSv9AR4vO3kEQ5DqbV8ohFmu6KmaGxtoyId0BncmMFFJKX
      D34CNvVC1qbJpeGHSTXWqYw+xFR1lM43r9FdLSJX51GHH2KWPD2JOVIWhGHURCKZjEWetDDi
      73iejxAbruqYBV7aYnxOUeiAn8t9iME8ANN7PsNy+W/o6fDb425RmQ8PW9yabSDXFUM9JrNL
      AV/5eAIvgLV1WFiP+KNDXWa7z/PbZXzBhlYBulktUKN0iFa6rSZtuMfDJnP0HgVAmDbP7Pt1
      Suf/kkc6vcgld4ftqBWJa7/WkEg60WsFyWQsatWa3Oyd2ZyDuu2Cd9ld5lzJRMc+VPbty5+/
      l2ilVmppIDt7wLQJV+Yx8r13fYzioQcpXXmBzJYnpJlpmFw58NHouNvPm+pg7eQno0/6LsMv
      /BV57XIl2c/8A5+OPmQ7XO4ewZu+glVcoD5/G5HsYMU1SNshpikwTbs5UTSmFU0a2zaj56M1
      9VARl9DVbZDbLwiV5uyCRgc+wrQIrRSTcy7FuSquqzETFnsGbVIJA41iuF+ytg7PvVpnpN+k
      4QmmFwOkkOwfcJgEyg2XbOLuWtS2Ft9o6kXjjrIHW3NNoXVUBFQL0Z78sEtdoF8UQaaL3tUb
      7NPFLbvAZmu9LRR38JhGA41etF6LTYN8qxWgXTdARLGCC/s+hcjd/UR7LyGEiBLbhUCY5i+m
      EinFfDzLTGaQA7VJzsgBrssC3z3823i5IcTKNJn1m+ytniVdmeBg9TXiS1c4ufAs5txVVjsO
      UdpzHKu0xNroY21ynzBMVP9+xNQNSo99HrUyh+jdy9Wbi2QsxYyfoBYadJgeb9RyjFdsiqHP
      MgbzyuSya7IkJUHcoO4qCpmIx3M8PktieYzVsqKreIVROcnhHkFvVlCIKyZmPIp1TS4r8QPN
      lXGfg0M2pYrGDzRHRhyu3vaZmPUoVgKCAHqyTQ5Ze3XftMI3EZXAbN3waD40XA/fD1GhRivR
      7AcW/dze8u0dsUG3Izl/jd+//id0GgGbkxx22w02hES0JXbbJ3Y5w86AyW7s05+umDxb+Bjm
      I5/7ha/hwwrdqNJ3+R+YO/ZroBRWUOb++k/4aOEWMQc237+peZ+OwOOG2823e/8IYTmo2joy
      sbPEpPY99PR1SKQhlUXN3MQcjKpeC7/BofP/gYnCE/TIVb52+CaOZYCWXBircnLIQBNyay7A
      CBXDhVaAKiKiCSGQGM1VTbXV19dvKwr9cdbKiiN7bUxj8+IouDTucnjYRErB4qpmcb5OX0aS
      S2kMQyKEsSWmFM2BTZVKmkZxtdrANA1c14vKdIZh+xuZ7KaMHO6BDLcZ1d5DfH/+QT5VeoWu
      bckO2xmgW4ViI2i2+fet35HsOvn1VgGrKcmFjhPIYx8eFue7gdzaZX7v1BSL5f8Vz1VUA8Gx
      ka0LlkCiNehQ4JgCryYg8MFydp38AMKy0fk+nJnreFJiHLyvvSWrpTL1WU3nUANd02gtERh4
      QUitWqNec/ADn8CHdExsGUe5XMe2LJSOco9ty2zaMGDHDTJJyWC3uXUV1xrXC3DsSHU5e7VB
      Mm6SStvMV0I6kgJTyEgFa8+F1sTfRLRsag3xuEUYKpKpWFsT0WrD8G1Fz+/ZC7QZ1/Z/kmul
      0zw89UM+o8faF7iZ4blz1W6FqrdO8O3f2elc3Rpkm/dt/rr3C1QOPfHL5/Js66vbRq4VvQuv
      8LnUS5impq9DI4TB1akAwYZzoK0ECvAqAfEug3LDgEZlSxXp3SAzOfzMIzvvb2GAiV/7H8Ct
      cfq1/w1DJBifcfErHscGrIimHAokIVE/ic3PL1qta5Ua8Xg8UjuERcNT2DGLbGqr8EY8JHjh
      rMtH749hSIlWmkP9AoHJ9JKg7gc4dmtObE6X3d3xIg3RTKZpX1EzvNxUp4RG6Sj+9K4JgEzn
      0IkMr2W/hn3u39KbCpBrHiN2SGxHdektt2Db663qziZiRfP3rY/rkpfhe4d/m3rP9rKIu0PV
      q8j4L+aReS+h1lciX/42akZh8TV+r/vHmEYU+RFCsLCqWC1t9qpsRUchxuxagye6FkhP/gdS
      60luiyHezH8alYz6GBv1Ek8s/x2ZsMT3jafxC/t39VAJw0BMXSEW1Bm/6lMvBuQH46RTcYQQ
      OI5FMhUyPhsQrIX0NvOHstkkAgPH2drXwDEjZ0cUud1ogiGQ3J71+Oh9DjE7auqcTlnMLvv0
      5qBaVyA12aRufuedNsjQTRVNbwmIvotNL5vh83Qnq/sfYr84y88LT9Ao/5xY1Uf5mkooSPea
      GMWAfa7X7Aq+uxTvXvpiKzwF39v31bue/MCHavIDyGzXjvd0GPAgr0eTX4NGML0I0jJ4/FTs
      jpH37pzF5WWf1WWfJ0ZtNHVOcp3kYp0zpQeoFUZJFW/y8a5ZhBDcr77FD8fjqPwA42oPC+Yg
      p9UZXBFjMugjNfYz9gwIvGpIYX+aZFxyZdanLyvoSMmm18bkwk1FX2fT29JqdaSJVJImTV5K
      QX3dp1pzSCVMNJrlVZ+pRZeONDitjvXNydnf5QAh8ZgCT29yXe60B98eup3lJoXRXDyineRd
      FYAWrmaf5MjC69woPMJecZv7Diy2hhFN7D0GV88oRnXAZF0wFFNbCrM2QkElBEdKJJobNYPz
      hYeoS4e0W+S+yhU6HIn2G1StzC+f2nMXMGXLdWewuKbxFIzkDaq1OoaM9GGjuc2HqkkBkQJp
      SfKx6P3WLvF09wyf1NNcXMrgsxFolFIwkG5weGgOmMP1X8a2wPM1hrjCT8bX6c1IpiuaXMYg
      EZN0pg1ml3xqK4qBvEHDhdkVzWTQx8n8GkOpOogAIaJob8s41VqjwoCYE3WkVFoytxJw36gd
      jb/p7y+WQxwjaqKitWSwW7O2HvKzawGZuODwgMR8C5/N9njUZvaBEALZclE3BeldFQCtNbg1
      RCLLc5nf4MGJr/NTfz/3dy5iW1tdpL2jMS6O+xw8aXP9YoPDTaNpzRO8Ygzz8ugXkHaM5NoU
      qlKitv9BZKqDea257rvES3N87eL/xcj8GSZ6h9/Ny3jfoMMAfA/siPGmVmaRhSEGl19htLPM
      5QkwTUVnxuRgj0m1WicIAkIhUCqMwvpCEI/HcN2IZVnIpQhLkddDKUUYKoIgBAFHO0qgIQg0
      ZnMWbc4pcprGarGqmVgx6Oi1mRchR+6LtZukAPQXLIrlkPOTHqVySNWLc/Hgv+LWwjn+q/A7
      0c4lwrYAaq0IQoX2XV58Yw3HCkklLPpygvX1qJpHGIaESjA5r7l/NN62iyQCpaGnCwa7JWNT
      IZ2Ooi+3kb/cghfA2GxICKQtwUjvzpKYrfz0lir17qpAQkBTnyxWI8NtWcT5i9LTfC35HOm4
      bu8CnWlJ56lI7y0ciDF3OSAF/HH8I7gPfB6j6TOvNX36cvM57Bj1TA8NJTlUvMJtrXYakb8M
      CAP02gK6WkJ09mA0ynS+8ueczk9xcQ2G+m36ujYyV+KJGAliKA31ep1EPKqGLYQk5jhoNJWa
      bld5VkoThmGzPlBIo+EipcT3ffK5SGmv1xr4voPSIaYRMXLTtqZUFdz0D/KV/VOYRjRZfD/A
      DwIc2yaTlBzbHyMMQ2aWXG4vj7Haez8/mBzjV7rGo2y9FhtBCAxp8OCBNG9MBOzflyTmbLIF
      NFy9pdBacmzv1n4NQggKHSZKC8ZnAjIpqHmSM7dCLAmlqiZpKXwliScEh/dZCAQvnvdYroU8
      tE9GdY9aO8G26oT3HAi7E0S2QLnic8I7w2XnQW5VcxyxbkVlNbbxMxIxwWQJKmXNuaNfRaay
      b3Hk1shN6suLfFTd4qXYYcJbF9Ghj0zfe8f19wvCMBHpTmSuF2FIPsWzfPXEGv3dNpm0wdXb
      LulExG6EDf1YCtHmTIl28DB6v9ZQSD8gHY9WyDAMcRwHQ0os0yLm2JiWgdlcYKZW6iSTkbDU
      ajWUUviBTyFr8mL2q8xVHE6lppBCoLTGdV1cz48+qzWu52GbIcdis5yvDTHd/xRXl2NUi1We
      neqiHDiMZOrIptq2UtHImEMua2OYGtMwWK8JhJYc2RuxRduUheZiKYQgFZfkM1EmWKkalUpZ
      qWhKVU1XVqKF5NBeC8eSXJ1WdHeZdOVMQjds1yESYqf19N4JgBBUMnu5Xe/kVPUFrnU/TWL5
      OoPpejt6u+GXhUK3xaIwuRJ/AHEH3/X246/lRnDHLzM38gQylUWXVxDpznsioX1QOLD0Yz43
      NMm5sTqrpYByNeTYiMPqumJywaO7c6vv/E6oNxTaDUjFIgEwzSi/wjTNqNZO83UrCFkOLApd
      MQRg2zaGNEink8RtmFsOudX1JKnV6wykGhFhTUos04yEypCYpkHMcUjHBLfPXCNQJqXhR7id
      Ok7H4kWu5x6lWAlZqEhWVhvULYe6TDBXsZkuOvRnvWgBXPDoykQNFbe6yTdIcEIIYrak0GHS
      3WnS1WGy3hB4SpDvNMikJLVGRN8Y7DGZmvHp64jsic2L7mbnyns+U/xkgXJQoHf5DZ7r+QNK
      C//EI/ZZ0ArbtjBNgxZFThkxDpoNpiS7dmjfgXiaNz7530Wr39WX0Lk9BOMXMfeMRiXBf0kQ
      L97miVzUsyyVkBwY2FADXD8gnTSYXQ4QRPr3W6EzY3B73WJyLWCwI9oVglBv0eFbEAJMQ+LY
      VlSdtgmtIx7T0/mr3K6d4DXrCQql5+iNrSM31Q0KwxDLstA6UrU+eyLkudmrJJbWKdQnCMJx
      MjrPG+mPonMD6GZEVhhGFP+ol7l25m/5SP88/fmIE5SKCzwvIAgiEl4QRBwzx7ERQmNacss4
      e/MG+wZiXLzpcms2xAvh2H4L19NUqgovYIvRrPSGWxnewx2gfZNjSZYzhwkr6wSdQ3iJYeoz
      tznY5dIqd96K0t1YjjOv+6h19L+1t9et03vjuwRXX+XByguU5pep94xiFIYg8FCrc2DHEHbs
      rY7yoYBWisfLz3C6e53xGY9MXJCMbzyPWkORSRt05yy0hvFZl46UsWs7I4gmxUo5JJQGC1WY
      XAxZ8g1WKhpCTTK29Xurdejs3CpUVRWZrykrZGZZMdX1KJOlOKPqPK7rYpomlWoNIQQN10Up
      jR8E5Dpi7E2WYH6cuL9GV1ryZNcCJ/zzXGn04SW7NrLxhEBYDmuF05QWi6Tqiwx2SZr2OmGo
      2iqcaZp4nh/l9batdoFtCWaWFJmU5Mw1n0o15MFjNo5lYJrQ3WVy5ZZPX6dgfE6xsKpYXFZM
      Lys60hLbfBcjwW8FIQSNwdMIYNlIsZb/HI+qr5NJbmx3WmuGuzXPZ4+yvfqhLq/StX4VC5+5
      nsfQq3PMmwP4uR7OJBwOBWMUZv6cC41PspI/Dh3dqNISweoC5tChDdbdhxDm/Bhpd5Lz1wWr
      pZCP3Z/Y8vd0UuI2y55mUgapRIwb0x65tKSrY+vjWy4GLK6FHBhysJsenUpNUayEDHZbLK0F
      XJxr0J+GXLPe52o5pHKj3j6Gbv8PEHBEn2VuuotyogcnniDhyMgGsSwQIIVs6+rReA1OHo0c
      IZevVBBCkLFDYtUiW9sXNk8hJfPZE/TZY0yvKlbWFadGJKZlA4pYPNYcUKtUezS4INR8f2KI
      S3M2cd2PVzC5b/17zeuWQIhlChIZi5eueLiB4EhO0Z+Hui947Yag2HHg/RGA7ReMELv4cgWD
      mTp9q+eY73u8/a5Wik+V/hOP9izx8+kO5sKHkX37gH1YQABcrB3EnL7I08V/prz8Amc6P0Xd
      ymLke9Fu7Rfm4r+fCFLdJOIdHOne2RcBwJSCYiOkpa1KKTi0x2Fy3uPGtMtIn41hCGaXfExT
      cnTf1l0vlZBMLXhobdLVYdDVkWRuyWd21qMrrrEsycmD8bcc4/WJRa50PMCLi/t4um8cKY22
      GzXCzgVmct6nkBK4vuavZg6xOHr6jsRmN7eP/1j6l4RS8KTzPWCuKVAtn30r8WnT8UsJ3uz5
      Enokiw/owOfWm5d5uD5PupkX7nqKRkORTJs8us9kaj7kzIxPJpXkx32/iegaeP8FACDM7+Hb
      M/fzhc4zOM08XgBDCj5vPsufL/QQ9uxH18okVq5xLLuM62vO+YcRzsbD0lpBvYowDMJ9D/CD
      8FSzBnaFvuvf4nRpnM6sw/cbj1Mc+Wjkc2+2Rf3QGMrJLKXFO0d2TJNmc8Kt2NNrUyyHvHKp
      TiZlsKfXIpPc/TgthmbLZ97fbdPfbXN2rMF9R99eTeykiJaC13p+ncT813mqf3HHrrpSClgq
      hlTrijiK7iR0Zw3OzjtMjHzubdvRBtmo+rhf3Umm1JteCwQ/mN3Pq+nPIhIb3kJhWswe+Rpn
      bv4fPHVCESrNm5dcTg5Lzt8K8QKTfIdkdkbzqvVxZN8+9k597723AXaDEJLlzCjn1vtZXYdh
      ZwnLjNxdSUfxoHGBroUzPKV+wiE9xlol5LVLITf6PonM5DcdJ9IjhWkRm7tEfOYcXuEgsdVb
      VHSKVT/OudTHqcskrK8RO/csrjAQTgJdKYEd/8ArRAgpSVcnOZSNSrNvd9RJCWtlRT67U2Bj
      jsT1NSMDDsnYna9jbtmnJ7/hNm2hWlckY2FEEZBRzm0QhEgREdxan+221xm7VqJRGGUx6GTE
      vcB6JaBUjSoCTi2GWDGT4X4H2zFIhAFdaclzs938cOB3IXEXbu3WNVVmOJ5Z2PD8bMoD8H34
      zsJRzha+sjt/yXIohikeSt4gCDV+PaCnQ7Beg2JZUSwqYikDf2mRhe6HKBn5D2YHgGjy1guH
      OadHubT8AEdWz3DavMKePDR8xUimTCauOX8rJJcElySyew+6UQNtg1ONAAAgAElEQVTb2dHQ
      zh04iTtwEgG4/VGvr9XN5wPcoVFMIntD1ctQXETk+96X61VL0+AkQKst/B8dBrA8yZWwTn+X
      SSa1uQVRtFj4QasoFWxWNwSRimEaW8sKbEa5GpLL3HmH0TpKtq83XJQKAYEKI0s0lUxiOxZj
      Ey6f77/KX6w/Si3Ry99dPsBney9hSp+pJUFn2sAWLmtFjecJnpvfw7I6TXnfCYT5i3WYX5AD
      hOG5tteqtf6X6ybfXDzNxNBn3tIdXC83uOqFvFbez1HzGqWq4ujQRh7BpWnFwyMVVi78NTPH
      fv2DE4AWhBAEhf1cYD/n3RrJ5WtUkwNIHfKRqW/Qby3Q3SHJpDx+feHfYBoCz1f8U+UjBEc/
      9o7PKXN96JX3r0+wyPWil2cQm3YwgETxFk8dcUnFHK5NetyY9nCciBLc8l/HHYkmciFWa5qJ
      uQDDiPzjjq0RMmxqyFtbCPmBZn7F5+CeSM3ZKFMfqSzVRogQJrZtEYQhhmG3K/gZhkRImF9x
      6e+WdKQ9+n7+t8zf/3vQ2cuevhuEoYUUEsMwaLgBNxYNroeHKY8+RiXZfUed/62w3jnKjbUf
      MdrVaAv0chn+uPyrqD2jb3tMt+cwf98YRAz0kz7zb7hvoMZGJULBcJdkzYPHMte4NvNPH7wA
      bIZwEtT6T7dt/RecP+Dk0jNMj98gl/FI2x7rNdCmwX5rgqth8I51eWEY0Ur3fkEaiMLQTpVL
      BcwsBFgmjAxY3JyCI/ssthuWnq+5NuGTiguyaUHMkeSzBq6ruDzuUeg06OqIVrooA1Bw5ZbH
      /iETRdCMrG44l2eXfI4fsNskNBtz09/1lvMurYWslgRPDi0zduPrXI4/TN0XpBMGtbrg9cUu
      zsn7Wek9fs+2lXDi/HT1QQ7pF9srfRgqwkzv205+HQbIdCekI+r3mj3AauU62Ti4gWZ6HQIF
      1YZCe5pj6bEPlwDsQDzF+T2/iR4IMZfHyc2+yu+ensRxBK+N5UAaaBXu2t9Xaw3ryxBPR/u8
      HduahaQUWA66Xnlfgmainfi8FTW7izcuuOSzkvmVANsUzC5FK3xPLnL9aa05f93lyIjdjhFc
      uOGyUgwIFRzdZ7OwEjJ220cpjWVFbY8KOcmL5+p84qH4lkBYqDReoJvDUWzn2GutqdYhEZOs
      ritOH7KjABiawVqJ4usv8iPVSzU5yE37OLK7J/LrE3ljKK+ivRqyZ+Qd3av5xCjF6ot0pqLd
      SCHvypMd3jyHcfCB9nNesIZ54/Z1rqQeYzS4wNOnvKabVHPxaoO0vMfq0O8XhGEQ9hxkqWsv
      35/5R47bN2jEu5uTaluGUeCRWBiju3Kd4so6dspBZAssDH4s0rfDAFQAsTTSibfJex8YMnlu
      6b10m1McGDLpSEsWVkM8X3NrRjEyYHHhuseJAw61hqJcDfB8TdyJBKMR9XqjJ2/Qm488LS1V
      Jwg0tilYLSm6cxE9GaJ+zEGgcT3d5uFvxrWJgLVySG/e4OBQ1CUGLUBrXF/RZRQ5n/0yYW4I
      4bsYC9fp1CvsDW/wWvJpyBQQ8p1X5lCZbn6+eIjPJqPMwtu1PLo385Y7QGtBa/+uNX4A86qL
      6uGnOVO5n/ztP+PBkZCXz9Y52RUwVuv65RCANgyLMeM+Dl46w/HUK/w4dxphOWi3HkV9hWDf
      5D/z2+mXOB8IrnTs59eOjaP1OK/OjCFNi9teD/vcC5xd6GAlNoJ64PMf6CUJIVGf+Fdcnn2V
      49bzjM/U6e0yyaYkr1xwWS6GhCFMLfjMLYWMDluslBRKa+47bHP1lk9rYm9fyW9M+XSmJUtr
      Id25DdVrZjGgOyeZXgwIw0hcCh0GfqAplhWWKRjoNlhYDhnujVibLWpzLiMY6ZMcMv+B2qpF
      wakxuCfyII0vSF4148h7VYOE4KK8n4/7V7ENwY21JORdeKvIvhDI7uGNVFwhMHTAavZIFLDL
      Fniu/AXGzzzPiF/hr/xPszz8yAfjBr0XhMkcVwoPEr/5GvmJV+itTZG48Qr9Uz+nrjRfMZ8n
      ZYfMlQVdeZOelIchBXs6XAbTNY53LDHQJXhw2KVWC5iWwx94oEwIQSM9wNTNVT6xf4Wx2z7J
      uGBpNeTh4zEGe0xScUnd1Qz12WgFa+shtbpmZMBqMigjRD5/qDU05ZoiZgv6CwaOLSiWQ65N
      +OQ6DPoKBmO3fDrSkp68wXo1xDRgsNcklzEoVRQxBzoyUXWHzUk0hU5JqdhA+g16cwa2FUX0
      X1kbZrbjvrsi7b0dAidN5+plrpRyjAdDHKq/zmLm2B2PLaKiRWAY7c9k3VkeDX/GeOoBhGVD
      poDnKWayJygOPoyw7F8+ARBCIOw4S32nWbVy9C5fYuzUv0BWVvlU+CP25iK+two0oRFim6JN
      J4aWehDdoFi4zujqy9xW/fiJnamJ7yeEENSNNJ1rl4gZIQsrUSi/rxD5701DsFIMKXQYrIc2
      paKPFDDYs739KayUQhZWAg4MWXSkJa9e8qjUFZ6vObzPJt7kA/UVDKYXw2aE2CSVkM0qzHBz
      ymegYOJYrYrMon18ISCXMchlJBPzPhNzHtIy+a78Itp5d+wpIQ2uG0eZTp8k687x5cJZXq/s
      R8ffIqbg1tDltXa91LqO0VO9zlIjRtDRjxACv2MAL9PXdkb80glAC8KyobOH2vAD6OnrWEcf
      53j5JTpi0QTPJCSm61NcCphdU6ytQ65zM5NQc/OWy7F+TXr1GhNFG12roKrrkMh8MAGyeJox
      534sr8zjw2ssrka6u5QRo7NUVuSzBg0P3pxJMSH3c8vtJSPKZGJRuHh82icMNTFHkE5Kxqd9
      Du+z6OsyyGW32ktSCnryBtcnA7JJucVQ7iuY3JwOyGU3N6rbWugsCKFYURwZsXlm8TQr+ZP3
      fAu0CjeSmywbDIsw1Mj1RaZSp9D2nWkbwnZAGuC7CMtGxJPM1ZPsvf6PWLVVKvkDOxwm70ph
      rA8SzvhZDh06ROnCz3mw9j32dUn8IAA0pmESBD6maTHuOhzY72BaUYK20pqXXmswkAnpTEtK
      ayH78nDxWoAO0vzg8G9R7737ZPt3E1orepZf42DxBSzLZCZ+mKpOYK7Pk8k4XLYfIuzYWMXS
      82f5ovVd1qsaUyqOjGzkDly95THYDYmETbWumV0K6clF92B2KYjydQHX03RmJD05g3gsCsbd
      mPRZWgs5dcghEdsgLTY8zdR81Jhi36DJjZUkf+v8YRTo+xBg6MY/MJIq8qb1CMXcUZ6+/L/w
      eOcCX/d/hcnhTwFNo5n3IR/gvUZs6ADzYxcxnBTKtTGMEDCwLLOp6SgsyyCsRIGlmaWQ+Zs1
      kkLxkS64WTNwY5q0E4X+DUtwQBdZvfinPJ/+7xHJ979fsBCSxcIjLOQeACE3dqNNFR83a8Lr
      3af4y/IQohDDuflTBmpnyTbNmj19FtPzAcX1MqWq4MHDgqUVgdKSnmxILOYQhiG1uo9Gcu6q
      JmZLnJiFITSHDyZYWHXxPPACzXo1ZKjX4tDeKMK7WDb5Nl961yZ/lCZ5b30cJoc+S2/xm3xe
      fIfvrCiuZh7kMb5LMoz4qKpWjrhJtfVffgEoWWn03gd4YOxPOD7QrJcjNrZtLW2WyjC7qhlF
      0Js3mL6qObUH0KAEdGUEP70kSC8olKsZQ/LoSMCbs29SOvjUB3ZtdxtUElIisl2Rm3Lf41wa
      f424FUb9ch3J1JzLQ8cSzK+EpFIWqVSUMA+R29RuZncZhmR+zWffgEkmbXNj0iNla7J9Jq30
      gws3YE9vNK4bSw7P6C9Ty76LRQmUolkv/50fw6vzMo9hlUv8Xu+3+E/Lx3mmMcx+6yqXy6sY
      tkPMsakFsQ+/AGitQN251r5WIXsnv8deJqk0olTAzd3Bby5CfT3gwTxcu1pH+CEP97eytaHX
      CJkaD/l4X7RDRN+Nvn9q5nme3/fEh4c5+hbQKoQwxF6dIGGFFLISP9TUXM1TDyUJfIVh6E09
      F6Kfga8wTIkRGliWJN8JmXTU+MQLIpVqaz1OAMGPZ4d4KfXld13t2S2o+QsfI53DQPGzxhMM
      rX+X/+LwRZ47L/nWeBYtxug89Ti8/G3yCf/DLwC8+SNUZz+yf/+uje2s0hxfyp0h5RhMLgvO
      3Q4Z6dAM5aKnZhuafb0Cx4ROHTSntox82wJyiejfdupBxZfMrTY4dPbPGO99kiDbg/gwJ9zX
      q5BI0+VNcnSviW1FfYJvzUVJ4dMrATEzZG2lgpTRai+lged7WKaJUoqlVYjFHBYrBgslyGWj
      pJQWtUI007h/NLOHlzp+7W0pzu8E2nfBct4Rj2gL0l2EjTo/8J7i9/0f8omTISUhudSkhHvF
      ZeKpnl8CL1CmEHllnPiueuGBpR9zOjsHKLJJSb2qiEtNuRFFPFMxwWpJ0xGPWnAaQiPR7UbM
      ra1dawh0dB88ZSCE5FRPSDZY5WlxjlPFl1i+NcFa9/Eop/VDBK3CNtWjr3Gdk50L1F3NSklR
      qUM6ISlVFIM9NoZpoJXGdiy0VliWGSW3WybLRc356z6GY6E0hA2XhqvJpjbYlOfmO3il5z+P
      vHDvAVrl5N+VYwlJvVwj9FwOZNbY11nn2nqOeqlE5rHPUU7+EgiAsByE7dzxphQrmuzyRXwv
      ZGkhYLRLk40LSjVNzYOXb2qO5vWWrvJCRMLgt4QAaCgTW4aEWuIYCksqpICOGNgGpGxNQa3S
      M/ECe9YukF+7Rrw0xWq8/z2bDHcLscnmWXMGSJducv36Gj35KAtspRiVCYnFDJSKGklH6YYW
      piUxTYlhCqYWInLgqVGHQkbQm5NIQzJ226er0+DSQpof5X4HnA9vht1mCMtBS4uVimSfOUFn
      QrHfnmX61iLTqz5u8gPMB3g3oJXi0MKPiWUC3HLIaPeG/l5Iw/iCxkFvKeG9GY7cYIPGjciP
      bok7p+MPZmAwEwCzzX9wbfI83+j9/XZGk9YatP7AEm20neQ74W/yYOb/pVheZGE1qrtkoqis
      +2gUQaCIxWzK65vSMDUQKvYNWDgyaCeipBMwutdibMLnefNxyL19yRqIbDddXUem3n8v2mbI
      TA4vk+MbxRy/Ufo7+rMBxvAxjL4no79/oKO7VwhBIWuxJxZyqLCR8qe15saM4nhO89lD93iK
      Tf/thkPxIv/1/L/ls2/8T+h6NdKVP+g+xPE0rxlPMj4bUnc1dVdTrkfFpOIxB8uS+H6AFOA4
      UWkaz/PoyBhktpQvj+6nYwtCK8GKe3cGb8uV+UFP/s2oxHr5C+MP+faNXuaLoNfm0Sr85RYA
      IQQ/LXyZqSAXUXGbAjBfgt73MSaTi2se6FwnvXbz/Tvp26H/EMMHe3j0pMOJgxbLJU0sYXJj
      JuDieIgWkmTawXYk8YRJLp+mv9emvHtuPn3ZECd+d6peSyXTKmy3yP2gIWJJwmSec4O/RY9Y
      5F+b/5GnFr++IQBaa3Sj9qEZ8N1CZQo8k/wK1SYtWGuN8RZl1+8Vdy7ZLtD3UJ9U++47/u5u
      EJbDa+6J6LUQdGYkV2/75LKSQ8MmCytbk4GEhLlFn2sTPtXaxjUqFVWpjtsK7d1BOu40Bml8
      6Gq2CifOxKGv8e/d3+Pn+rENARBCoMMAvbb4QY7vHaHWtZ9X6iNErYI03RnBZFVybRkmitHD
      DBVcWoTl6tsfr1EPaNSDZoM10Frg+xrX3X1x0MA5t49K1zunTuzm4r1XmNpvv+7JGxzea9Gd
      MzAN8IOtghyGGs/TfPy0ycJKwMvnG8wtB7Ry0uM2dG7Jso6gKsUozwLaDSg+7BBSIrsG8fuO
      bFWBZDKDaKaT/TJBCMmZ9EdwfSiXXBr1gBMD0J2D20XBmTkYqxmM7LNYrL398Xw/wPdCKuUG
      pWKV8nqdaqVO4O9SnwQ4XyvwvaHfeU8m8b1gMnGSYnnnhHRsyWop5NyYy/RC0KydvxF83ddv
      0JESLJagWo8SSybnQ0aLP0HX1ps9t6LFQKb+//bO7Dmu47rDX/e9d/YZ7AuJhRDBnaJIi45E
      yaYly7GUyI5VqlSpYrtil/OQl/w1qTy4kqrkIQ9+SMoVJY5tVSyXYymW6EhWJHERQYqUCAIk
      1gEw+9x7uzsPd2YAkCAJilhm+1iswhQHw3vn9uk+5/Tp3+kMCtAA1pw5hkog7HvUM3etT/X2
      EDdLof8I7+aC+oZyySOXK+FIw+ODJSIJm8MjFmFbICIWny7e61OCERCOOIQjNvFEmEjUIRSy
      iMZCRCLOXcHwfNHiP/teQ8Xrb5PM8otYG2iCAjx1IhJIqWjDxU9d3r9YZnZRUXaDri6uD6Wy
      ZnFZMT3rMdgtOP6YDEoVlIe+ebnmEgkhcG5+RLUbTBUh5LZslm0lDZ0GXYuQkt93vcTT7iSx
      cNCIGwLls+nF1TLew6M2rm9xfkoR0ZrxDsOdSZtQyKoN9Oh9Aj9PwT/Jb+P21F+DDuOW+I58
      neQGyQBjDO9+WKYrJRgedhjuD7rDn7/mYwDPB8cCJSRD/aJWJu14QNFD2CGsfccwpcCflLc+
      4eXIm/wincDrHd+5m9wCJNXUoQ6CIrOTSglbjNs1zIXySNBaSIrKlr+FLU2te7jB4NhwbMwi
      2mUxX1if6LxfyvNOlIFy1/D23tQXJJSbYawjv+G9GBMUBR5d04xCCMETBxwmZxRXp3yQYEvD
      9anV8eBYYHu51d+JxDGlPCeLb/H4kEufN7m9N7UNSFPKY8rFQK7aLdfdNv9D4YR5Y/hH/Gv2
      j5jLgtEGz0hKytowQOtOCCYW4cbyw/031UyQFBDyNhFVPyLGcx/6d8bcy8TCqxpB6/5UpVPu
      ENm6csMjmzckY5LDow7K0+g1X9nFlQH8zsDgjVtkz+3f8tLSP/LSoTTzK4Z5r37y/pvFJhzF
      ZIqB729VculaNUQF5IaEY1we/3MmVs7y1bnXOeVcJxUNOhoao2s6mYigJ9ZXTjlc+lzhKk1o
      E7a/Ng1a9AWFaN+jF249gC9SalHIFPnkahEtZO2ccDgs6O+2iMckrjJ8OOGSSgjG9thMTHoM
      9dskY5JsXjNxw2Ow1yIRg7mMxbvLB7mYeqHm03evfMIPR96puEeC+VKUcu+BhttYsoW0ELFU
      oI9jWYG0hJAYz931GpdHwXT083b0B6y89w+Mh24hBmyqMf9aOW+A0UHJzG3N6ENOYB/6o3CH
      0lu9kE+NcTD5EY69mrr1fMPtWY/ffebTHzGEQ5BZgfeXw5w6FKpJqkfDgXr3QI9kZtnmJ95r
      FAfH1n2+UaoWOxkMc24nsiu5U7e3ZdhQyX1EYlTjASElyMYd/DVCEdyOEZz0FHemp+dWNAuZ
      oDfWzLLhm/d05as6ddVX1aOBMBXaQOmtTljqP8l70+/xbP+q/KNjC0b7BMWc4Gjv6gTwyaJP
      2XVqBqArugET83Fed76Pv0Ev42xokGIJ4kGfPq7qjfdATDEXlDdXs0HGYHy3brKNwZ6p1sGu
      nWWD71XigdIX8j3rjZITJyEFhfJ6C1jIGI4PCU6MSMZ6BWrDDZx7OzdXiymuDL2wxVe7dQgp
      eS/8DO4mznsf6TZcu1pEVxz+mUXFYLdFWdl4oQ1UGIzhMfc8sYpMz2IG5uPri66MVpjpSmnI
      2kmiouhdLwQrQCXwNVpVhSUDnf0G2NV7ELb22BsW/N9Nje1qPAxhKaqnAQFIRgUTi4LuCAzV
      VD3Wz/xVtIGcJ/hN+FmI1HcfspXe47xz6wOe7/scKqJZ128rYtaqNAwEj/twl+ZXb+cZGXJw
      IhbJuMW4WMFZuI4/eHjd5xq3yJn4pVoJ9tVMD7qvZ910IaQFQ/WfEl0X6QppBa4QwcEEXcjA
      Fh5Q2GmMMYzkJ3GkRCwoHt9rwPhIS7JUElydEowMSAY7BYOdNh9f1yQsTUf07vtdKQt+Vxjh
      XPRpRLILMzi+7cHvoyKkZM70ILhRM+WyazjQfYfwrm+YzEpePG3hK8PNXGAsIQcc4XPn/rcI
      Rbmx0ssYMxhjuKwO1l3Nz2a5b6pHrmlXWq1zR6u6391bi6M95j1Df0oSkgpNcO63LwZdyuez
      awKVtDi4V3J0VHJ1Ek5EgwFQzfhcLPby731/QXl8uHZmtd4Hf5VluxdtTK3MQZugv5Yla0cA
      uJoWHBizkELgWAblGjzf8MFMN6XUyN0fKgQLuhtjbjOzFIjZNiqbznXWVoEGGvwYTdS4ZHzD
      Y50WBr+WAgWwLcHBDriZVWSKkmRUMLuk2ZeAZDgY/OmSzU8HfoDu3NMwg34ti84AJVcQrbrd
      UnB9MdjUyiPxPcOhfQ6OBSBIZw230oZfqK+RGX32nkH+pd4/YfrmKCvR4UCRokF5uGR/o7lC
      5SL9aoVFD3ztBQoHVA1A1M4QfJ4XDOZgclbRITVqzRHRFc9CRe6vTFzPeIl+5pYj7AsXAIMt
      oYgk2SHZV1PKWz1Jt5w3uCVNsa/7vhkuYYfIDNy78V2jIKulrM1IdHmauPTpjOuKvEdwUGNt
      sYMQgq8NwkjJh6zP+KBNV7TSvtVAVoUaa9W7AxGJ8988w8UbCt+XZHI+x/bZ9CQFSkGx4FEo
      eJTKmlxJM75HcnQsitc1utuXviPYwrK5f1fqxqUvO8ls0edAX3XxMpVgbe28FWREpguGI0OS
      sL1a0pvxLN7Y892H7nNVb9zof5bhwgVCs7cY6YFsrhjM+ZUVXSO5saAIhW32GsG/Wa/uSNOQ
      eqAxQ/dNknKXKWuQIug6LitLum8kOVX1/gTzecP8kmYxD9XB7xvJr7wnKPTtjj7oViKkxcfx
      s4z2S7pTFslktFbqHY+HiUVtjJHEpeY32eOs9B7f7UveMZraAKTSgMZ1NaWSj+tq3LLGK5YR
      xQLFgk+p6HFrRXEi6uEsKSamDNrAucIQF8e+vdu3sGVke4/w8XIfvtIoX6P8Sl9JIbAtyRMj
      knAszET/H+/2pe4oDVrx9mAsAVE3R7nko7XALXuVMumgRFpKidbBypDLu5Rsl+6uBEmteXcy
      wpunvouJbk4CpCEQgpJ2KBVdpAyyYZYtKWuwbIvJJYtf9nwPN9x4FZ2PQtMagNaaLqtMRyxc
      ax0Vi4VrrX5qCIjGHFKxMGBQBt7qfxmTbNzU3kYIaTHp9vJMzy2KZc2NbIwyEXxPcYVxMj1P
      kttKkdsGoWkNwBRzjJVukBYGxwIn5iCEAfRdRhDpTPJ34acZoEA+lKJ08Jndueht5trYn/H3
      s0Okw3sxw3sbt+R9C2nab2Dv9Pv0hTXpTZzJPhbLc064XDnyyvZf2C4i7BDpoTPBz7t8LfVC
      UwbBppTnyflzXM/C0Yons7bNz53aPkLAiHd7Zy9yA4zRmNImZCvabBlNaQB4ZfaYZULSUFJs
      UMwXNIc2BBmfiUKM/9374q5c6lqEkIhIfbQZahWa0wWKpZizOgm5aSL3uMPfLiT4ZPArzEUG
      8cb3B32G27QcTWkAcnmWEbHCrARbrp/9q+dj51Nj3DoQHGipN3/YaBUoTLeD1G2nKb9hJ5/G
      8/Vq94s1/EvhKCbRwc2BY7twZZtjK9oEtdkcTRkDWNkFfjw3vKE+bkLnuBoZJztwZOcvrE3d
      0XQGYIzB5JY51CWJbrC+KSz8WP3JGLbZHZrOAMCwUjZEVYl0cf2/aAOfDXwZ07fBKac2LUnz
      xQDlEmruJjKUZskK0pxSCFwFb3oHWBg9XHdBb5vdo/kMoJglnp/jcLcPtqj1DH5b7efcqb9u
      D/4262g6F0gsTvOlkRSH7ijkPGBmid78uCEaOLTZOZrOAFQkwZW0z8dLgn2dq/P9vnCeV2Z/
      Cqq+Gza02VmazwA+u0i/yWILiKxJp9/yYvxs7IcNf7yxKdnFVbnpDMCyJGkXwlEqUh8Bvw49
      Sb53/+5dWJt7MuyUiYnd6UvRdEGwCccpaUnR1ygNloS3vMf4dPy53b60Nvdgyt+9OqymMwB6
      hynisJL3yXVAKgxXogcwsbtFXv3pa7AwhYwmEQdO1a3Sc5vto+meuIjGKZR93lmwuLpoOD9r
      iE6dvzv7Ywz65gShy+/hzFxnu/oKt6lvmm4FkH1D2PuOEF+c4GI+gpYWjuOB78JaWW4hCJ15
      GXX6G2A57dm/XqjOQzu0YdN0T10IiX38WRY8C6FcVkyYAZVm4NYHG7/fCbcHfz2xqtK4IzTl
      k5eDj6FOfJ1LKzblbIaMB9/P/IyBz3+HzqRr/W23CtsYErJJ5fWanKZzgSDQxXdOPocaHCN9
      7ud8lJ7iCj0k9i8joplA63MLT4D5QpDT7SKLRkT87YVFM7WJNjqNijEGk55B3byC/cTZtrvT
      Zh1NuQKsRQiB6NmD7Nmz25fSpg5pT4dtWpq2AbRpadoG0KalaRtAm5ambQBtWpq2AbRpadoG
      sJZ2PVzL0TYAICIqI7+9mdtyNP1G2H2pjPtSe+S3LK1tAJVxH5WGkDCUlKDcNoaWoqVdIIHh
      WNTnVNxnxZftwd+CtKQBjIUVGDib9EnZhitFi4TVjoBbkZZ0gRZcyXd6XK4XJRcKdjv4bTIc
      YUhahrT/4Pm9tVYAE/x9tc8lKg0Xiu3B34ycjCtOxhSOMMSk4VBYITF0WHcfWmqpFUAIw+mE
      YiwSfBFnEh7ncs4uX1UTYQynEor9EU1EGv4nYzNZ3vmzJhL4aqfP44lAa6jTNsy5wUz387TD
      VNmqTXytYwAG+kOGP+1elUY82+lzLuu0V4Et4vlOn7Mdfu31aNjln2fD3PK20NEwhjNJn6eS
      iklX8uslh5KGkwlF2hPELcMLncEz7rRX47r+UPDzjwZdMj78IWvzTtZuDQPYF1LsDWu6HXDd
      EqHKcciJgtUe/FuBgec6PHLe+i/TkXA64dNTlpwvPPpQS0lDf0jzXKdPSMIJR3E4qrAEWA/x
      HFM2fL3L53hctYYBlDRMlyXf6CyjVLAkuxreSLfdn0chIQ2v9LjMe4IjMU2HfXcm7VRScTyu
      OJVQ5H3BtZKkwzZMuZKMJ1ioBqoPGMAdluZv9pbvGuihR7wuxIYAAAGnSURBVFhc+kOmNQxg
      1rewMGR9Q7xyJtgY8DStlgbYEjotzemE4qmUjy1gf/T+73cktbjreGK9Bmjeh7IR/Ph2GL2R
      FRh4MuFzMu4/1Cy/WVrCAKpIaSEr8iVhK/AbP9yCpbkZ6bE1JS3Ir1W7MIYvJxVnOzwSWxTb
      xm2IY3gqERjTjCu5XpY1Y3i52+V0cvuEc5v36Rv4VrfLZwXBpbKDAcoaEmumkdQGS3arMxRS
      hIBXe12WlOQ/Fh0WK27K8x0+Zzv9+3/AF+Sb3auf+5PZENfKFo4wDIW3V2+paQ0gKg2uFnyr
      12P6tsVrfS49zuqA9w38Idd4t29h6LLNqu/8gPeejCsuFSxK5sH+Q4el+atBt/Y6bmv+sr/M
      uxmbC3l7XVZluzkaVbzY5ZLa5kfUeCPgARyIKNK+IKcEZzp8jIHRkMtgeP3DswWMhDSXS42l
      ifSluOLZDp//Sjss+gIDLPmC4XDgsiSkoccxpD3BiYTi8bjibMon5RhulCRFDSHgl2mHjA7S
      hgCnE4qnk3fP7kkbXuz2GQoZDsd2RsP/ewPug9+0Rfw/iLd1Lh108oAAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 4' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
